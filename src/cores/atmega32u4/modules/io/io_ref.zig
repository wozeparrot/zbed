pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const intmax_t = i64;
pub const uintmax_t = u64;
pub const int_farptr_t = i32;
pub const uint_farptr_t = u32;
const struct_unnamed_1 = extern struct {
    low: u8,
    high: u8,
    extended: u8,
};
pub const __fuse_t = struct_unnamed_1;
pub const __INTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):62:9
pub const __UINTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):66:9
pub const __PTRDIFF_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):73:9
pub const __INTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):77:9
pub const __SIZE_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):81:9
pub const __UINTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):96:9
pub const __INT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):159:9
pub const __UINT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):187:9
pub const __INT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):225:9
pub const __UINT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):229:9
pub const __INT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):265:9
pub const __UINT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):269:9
pub const __CONCATenate = @compileError("unable to translate C expr: unexpected token .HashHash"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/stdint.h:290:9
pub const _MMIO_BYTE = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/sfr_defs.h:128:9
pub const _MMIO_WORD = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/sfr_defs.h:129:9
pub const _MMIO_DWORD = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/sfr_defs.h:130:9
pub const _VECTOR = @compileError("unable to translate C expr: unexpected token .HashHash"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/sfr_defs.h:213:9
pub const loop_until_bit_is_set = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/sfr_defs.h:254:9
pub const loop_until_bit_is_clear = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/sfr_defs.h:263:9
pub const FUSE_CKSEL0 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1460:9
pub const FUSE_CKSEL1 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1461:9
pub const FUSE_CKSEL2 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1462:9
pub const FUSE_CKSEL3 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1463:9
pub const FUSE_SUT0 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1464:9
pub const FUSE_SUT1 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1465:9
pub const FUSE_CKOUT = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1466:9
pub const FUSE_CKDIV8 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1467:9
pub const FUSE_BOOTRST = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1471:9
pub const FUSE_BOOTSZ0 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1472:9
pub const FUSE_BOOTSZ1 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1473:9
pub const FUSE_EESAVE = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1474:9
pub const FUSE_WDTON = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1475:9
pub const FUSE_SPIEN = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1476:9
pub const FUSE_JTAGEN = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1477:9
pub const FUSE_OCDEN = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1478:9
pub const FUSE_BODLEVEL0 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1482:9
pub const FUSE_BODLEVEL1 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1483:9
pub const FUSE_BODLEVEL2 = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1484:9
pub const FUSE_HWBE = @compileError("unable to translate C expr: unexpected token .Tilde"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/iom32u4.h:1485:9
pub const __STRINGIFY = @compileError("unable to translate C expr: unexpected token .Hash"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/interrupt.h:42:9
pub const sei = @compileError("unable to translate C expr: expected ',' or ')'"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/interrupt.h:81:10
pub const cli = @compileError("unable to translate C expr: expected ',' or ')'"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/interrupt.h:99:10
pub const ISR = @compileError("unable to translate C expr: expected ')'"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/interrupt.h:139:11
pub const SIGNAL = @compileError("unable to translate C expr: unexpected token .Identifier"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/interrupt.h:164:11
pub const EMPTY_INTERRUPT = @compileError("unable to translate C expr: unexpected token .Identifier"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/interrupt.h:188:11
pub const ISR_ALIAS = @compileError("unable to translate C expr: unexpected token .Identifier"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/interrupt.h:243:11
pub const reti = @compileError("unable to translate C expr: expected ',' or ')'"); // /nix/store/z8ql3z7mj9v6kh5vpdkq1mjsnhl4w374-avr-libc-2.0.0-avr/avr/include/avr/interrupt.h:264:11
pub const __llvm__ = 1;
pub const __clang__ = 1;
pub const __clang_major__ = 11;
pub const __clang_minor__ = 0;
pub const __clang_patchlevel__ = 0;
pub const __clang_version__ = "11.0.0 ";
pub const __GNUC__ = 4;
pub const __GNUC_MINOR__ = 2;
pub const __GNUC_PATCHLEVEL__ = 1;
pub const __GXX_ABI_VERSION = 1002;
pub const __ATOMIC_RELAXED = 0;
pub const __ATOMIC_CONSUME = 1;
pub const __ATOMIC_ACQUIRE = 2;
pub const __ATOMIC_RELEASE = 3;
pub const __ATOMIC_ACQ_REL = 4;
pub const __ATOMIC_SEQ_CST = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __VERSION__ = "Clang 11.0.0";
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const __OPTIMIZE__ = 1;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = 1;
pub const _LP64 = 1;
pub const __LP64__ = 1;
pub const __CHAR_BIT__ = 8;
pub const __SCHAR_MAX__ = 127;
pub const __SHRT_MAX__ = 32767;
pub const __INT_MAX__ = 2147483647;
pub const __LONG_MAX__ = @as(c_long, 9223372036854775807);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = 2147483647;
pub const __WINT_MAX__ = @as(c_uint, 4294967295);
pub const __INTMAX_MAX__ = @as(c_long, 9223372036854775807);
pub const __SIZE_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINTMAX_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __PTRDIFF_MAX__ = @as(c_long, 9223372036854775807);
pub const __INTPTR_MAX__ = @as(c_long, 9223372036854775807);
pub const __UINTPTR_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __SIZEOF_DOUBLE__ = 8;
pub const __SIZEOF_FLOAT__ = 4;
pub const __SIZEOF_INT__ = 4;
pub const __SIZEOF_LONG__ = 8;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const __SIZEOF_POINTER__ = 8;
pub const __SIZEOF_SHORT__ = 2;
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __SIZEOF_WINT_T__ = 4;
pub const __SIZEOF_INT128__ = 16;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = L;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __INTMAX_WIDTH__ = 64;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __PTRDIFF_WIDTH__ = 64;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __INTPTR_WIDTH__ = 64;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __SIZE_WIDTH__ = 64;
pub const __WCHAR_TYPE__ = c_int;
pub const __WCHAR_WIDTH__ = 32;
pub const __WINT_TYPE__ = c_uint;
pub const __WINT_WIDTH__ = 32;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTMAX_WIDTH__ = 64;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __UINTPTR_WIDTH__ = 64;
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = 1;
pub const __FLT_DIG__ = 6;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = 1;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const __FLT_MAX_10_EXP__ = 38;
pub const __FLT_MAX_EXP__ = 128;
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -37;
pub const __FLT_MIN_EXP__ = -125;
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = 1;
pub const __DBL_DIG__ = 15;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = 1;
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __DBL_MANT_DIG__ = 53;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __DBL_MAX_EXP__ = 1024;
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __DBL_MIN_EXP__ = -1021;
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = 1;
pub const __LDBL_DIG__ = 18;
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const __LDBL_MANT_DIG__ = 64;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const __LDBL_MAX_EXP__ = 16384;
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const __LDBL_MIN_EXP__ = -16381;
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = 64;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const __WINT_UNSIGNED__ = 1;
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = L;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_MAX__ = 255;
pub const __INT8_MAX__ = 127;
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_MAX__ = 65535;
pub const __INT16_MAX__ = 32767;
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = U;
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub const __INT32_MAX__ = 2147483647;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = UL;
pub const __UINT64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = 127;
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = 255;
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = 127;
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = 255;
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = 32767;
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __FINITE_MATH_ONLY__ = 0;
pub const __GNUC_STDC_INLINE__ = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __FLT_RADIX__ = 2;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __GCC_ASM_FLAG_OUTPUTS__ = 1;
pub const __code_model_small__ = 1;
pub const __amd64__ = 1;
pub const __amd64 = 1;
pub const __x86_64 = 1;
pub const __x86_64__ = 1;
pub const __SEG_GS = 1;
pub const __SEG_FS = 1;
pub const __seg_gs = __attribute__(address_space(256));
pub const __seg_fs = __attribute__(address_space(257));
pub const __corei7 = 1;
pub const __corei7__ = 1;
pub const __tune_corei7__ = 1;
pub const __NO_MATH_INLINES = 1;
pub const __AES__ = 1;
pub const __PCLMUL__ = 1;
pub const __LZCNT__ = 1;
pub const __RDRND__ = 1;
pub const __FSGSBASE__ = 1;
pub const __BMI__ = 1;
pub const __BMI2__ = 1;
pub const __POPCNT__ = 1;
pub const __PRFCHW__ = 1;
pub const __RDSEED__ = 1;
pub const __ADX__ = 1;
pub const __MOVBE__ = 1;
pub const __FMA__ = 1;
pub const __F16C__ = 1;
pub const __FXSR__ = 1;
pub const __XSAVE__ = 1;
pub const __XSAVEOPT__ = 1;
pub const __XSAVEC__ = 1;
pub const __XSAVES__ = 1;
pub const __CLFLUSHOPT__ = 1;
pub const __SGX__ = 1;
pub const __INVPCID__ = 1;
pub const __AVX2__ = 1;
pub const __AVX__ = 1;
pub const __SSE4_2__ = 1;
pub const __SSE4_1__ = 1;
pub const __SSSE3__ = 1;
pub const __SSE3__ = 1;
pub const __SSE2__ = 1;
pub const __SSE2_MATH__ = 1;
pub const __SSE__ = 1;
pub const __SSE_MATH__ = 1;
pub const __MMX__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const __SIZEOF_FLOAT128__ = 16;
pub const unix = 1;
pub const __unix = 1;
pub const __unix__ = 1;
pub const linux = 1;
pub const __linux = 1;
pub const __linux__ = 1;
pub const __ELF__ = 1;
pub const __gnu_linux__ = 1;
pub const __FLOAT128__ = 1;
pub const __STDC__ = 1;
pub const __STDC_HOSTED__ = 1;
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = 1;
pub const __STDC_UTF_32__ = 1;
pub const _DEBUG = 1;
pub const __AVR_ATmega32U4__ = 1;
pub const _AVR_SFR_DEFS_H_ = 1;
pub const _SFR_ASM_COMPAT = 0;
pub const __USING_MINT8 = 0;
pub inline fn __CONCAT(left: anytype, right: anytype) @TypeOf(__CONCATenate(left, right)) {
    return __CONCATenate(left, right);
}
pub const INT8_MAX = 0x7f;
pub const INT8_MIN = -INT8_MAX - 1;
pub const UINT8_MAX = (INT8_MAX * 2) + 1;
pub const INT16_MAX = 0x7fff;
pub const INT16_MIN = -INT16_MAX - 1;
pub const UINT16_MAX = (__CONCAT(INT16_MAX, U) * @as(c_uint, 2)) + @as(c_uint, 1);
pub const INT32_MAX = @as(c_long, 0x7fffffff);
pub const INT32_MIN = -INT32_MAX - @as(c_long, 1);
pub const UINT32_MAX = (__CONCAT(INT32_MAX, U) * @as(c_ulong, 2)) + @as(c_ulong, 1);
pub const INT64_MAX = @as(c_longlong, 0x7fffffffffffffff);
pub const INT64_MIN = -INT64_MAX - @as(c_longlong, 1);
pub const UINT64_MAX = (__CONCAT(INT64_MAX, U) * @as(c_ulonglong, 2)) + @as(c_ulonglong, 1);
pub const INT_LEAST8_MAX = INT8_MAX;
pub const INT_LEAST8_MIN = INT8_MIN;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const INT_FAST8_MAX = INT8_MAX;
pub const INT_FAST8_MIN = INT8_MIN;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const INT_FAST16_MAX = INT16_MAX;
pub const INT_FAST16_MIN = INT16_MIN;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const INT_FAST32_MAX = INT32_MAX;
pub const INT_FAST32_MIN = INT32_MIN;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const INT_FAST64_MAX = INT64_MAX;
pub const INT_FAST64_MIN = INT64_MIN;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INTPTR_MAX = INT16_MAX;
pub const INTPTR_MIN = INT16_MIN;
pub const UINTPTR_MAX = UINT16_MAX;
pub const INTMAX_MAX = INT64_MAX;
pub const INTMAX_MIN = INT64_MIN;
pub const UINTMAX_MAX = UINT64_MAX;
pub const PTRDIFF_MAX = INT16_MAX;
pub const PTRDIFF_MIN = INT16_MIN;
pub const SIG_ATOMIC_MAX = INT8_MAX;
pub const SIG_ATOMIC_MIN = INT8_MIN;
pub const SIZE_MAX = UINT16_MAX;
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = __WCHAR_MIN__;
pub const WINT_MAX = __WINT_MAX__;
pub const WINT_MIN = __WINT_MIN__;
pub inline fn INT8_C(value: anytype) @TypeOf((@import("std").meta.cast(i8, value))) {
    return (@import("std").meta.cast(i8, value));
}
pub inline fn UINT8_C(value: anytype) @TypeOf((@import("std").meta.cast(u8, __CONCAT(value, U)))) {
    return (@import("std").meta.cast(u8, __CONCAT(value, U)));
}
pub inline fn INT16_C(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn UINT16_C(value: anytype) @TypeOf(__CONCAT(value, U)) {
    return __CONCAT(value, U);
}
pub inline fn INT32_C(value: anytype) @TypeOf(__CONCAT(value, L)) {
    return __CONCAT(value, L);
}
pub inline fn UINT32_C(value: anytype) @TypeOf(__CONCAT(value, UL)) {
    return __CONCAT(value, UL);
}
pub inline fn INT64_C(value: anytype) @TypeOf(__CONCAT(value, LL)) {
    return __CONCAT(value, LL);
}
pub inline fn UINT64_C(value: anytype) @TypeOf(__CONCAT(value, ULL)) {
    return __CONCAT(value, ULL);
}
pub inline fn INTMAX_C(value: anytype) @TypeOf(__CONCAT(value, LL)) {
    return __CONCAT(value, LL);
}
pub inline fn UINTMAX_C(value: anytype) @TypeOf(__CONCAT(value, ULL)) {
    return __CONCAT(value, ULL);
}
pub const PRId8 = "d";
pub const PRIdLEAST8 = "d";
pub const PRIdFAST8 = "d";
pub const PRIi8 = "i";
pub const PRIiLEAST8 = "i";
pub const PRIiFAST8 = "i";
pub const PRId16 = "d";
pub const PRIdLEAST16 = "d";
pub const PRIdFAST16 = "d";
pub const PRIi16 = "i";
pub const PRIiLEAST16 = "i";
pub const PRIiFAST16 = "i";
pub const PRId32 = "ld";
pub const PRIdLEAST32 = "ld";
pub const PRIdFAST32 = "ld";
pub const PRIi32 = "li";
pub const PRIiLEAST32 = "li";
pub const PRIiFAST32 = "li";
pub const PRIdPTR = PRId16;
pub const PRIiPTR = PRIi16;
pub const PRIo8 = "o";
pub const PRIoLEAST8 = "o";
pub const PRIoFAST8 = "o";
pub const PRIu8 = "u";
pub const PRIuLEAST8 = "u";
pub const PRIuFAST8 = "u";
pub const PRIx8 = "x";
pub const PRIxLEAST8 = "x";
pub const PRIxFAST8 = "x";
pub const PRIX8 = "X";
pub const PRIXLEAST8 = "X";
pub const PRIXFAST8 = "X";
pub const PRIo16 = "o";
pub const PRIoLEAST16 = "o";
pub const PRIoFAST16 = "o";
pub const PRIu16 = "u";
pub const PRIuLEAST16 = "u";
pub const PRIuFAST16 = "u";
pub const PRIx16 = "x";
pub const PRIxLEAST16 = "x";
pub const PRIxFAST16 = "x";
pub const PRIX16 = "X";
pub const PRIXLEAST16 = "X";
pub const PRIXFAST16 = "X";
pub const PRIo32 = "lo";
pub const PRIoLEAST32 = "lo";
pub const PRIoFAST32 = "lo";
pub const PRIu32 = "lu";
pub const PRIuLEAST32 = "lu";
pub const PRIuFAST32 = "lu";
pub const PRIx32 = "lx";
pub const PRIxLEAST32 = "lx";
pub const PRIxFAST32 = "lx";
pub const PRIX32 = "lX";
pub const PRIXLEAST32 = "lX";
pub const PRIXFAST32 = "lX";
pub const PRIoPTR = PRIo16;
pub const PRIuPTR = PRIu16;
pub const PRIxPTR = PRIx16;
pub const PRIXPTR = PRIX16;
pub const SCNd8 = "hhd";
pub const SCNdLEAST8 = "hhd";
pub const SCNdFAST8 = "hhd";
pub const SCNi8 = "hhi";
pub const SCNiLEAST8 = "hhi";
pub const SCNiFAST8 = "hhi";
pub const SCNd16 = "d";
pub const SCNdLEAST16 = "d";
pub const SCNdFAST16 = "d";
pub const SCNi16 = "i";
pub const SCNiLEAST16 = "i";
pub const SCNiFAST16 = "i";
pub const SCNd32 = "ld";
pub const SCNdLEAST32 = "ld";
pub const SCNdFAST32 = "ld";
pub const SCNi32 = "li";
pub const SCNiLEAST32 = "li";
pub const SCNiFAST32 = "li";
pub const SCNdPTR = SCNd16;
pub const SCNiPTR = SCNi16;
pub const SCNo8 = "hho";
pub const SCNoLEAST8 = "hho";
pub const SCNoFAST8 = "hho";
pub const SCNu8 = "hhu";
pub const SCNuLEAST8 = "hhu";
pub const SCNuFAST8 = "hhu";
pub const SCNx8 = "hhx";
pub const SCNxLEAST8 = "hhx";
pub const SCNxFAST8 = "hhx";
pub const SCNo16 = "o";
pub const SCNoLEAST16 = "o";
pub const SCNoFAST16 = "o";
pub const SCNu16 = "u";
pub const SCNuLEAST16 = "u";
pub const SCNuFAST16 = "u";
pub const SCNx16 = "x";
pub const SCNxLEAST16 = "x";
pub const SCNxFAST16 = "x";
pub const SCNo32 = "lo";
pub const SCNoLEAST32 = "lo";
pub const SCNoFAST32 = "lo";
pub const SCNu32 = "lu";
pub const SCNuLEAST32 = "lu";
pub const SCNuFAST32 = "lu";
pub const SCNx32 = "lx";
pub const SCNxLEAST32 = "lx";
pub const SCNxFAST32 = "lx";
pub const SCNoPTR = SCNo16;
pub const SCNuPTR = SCNu16;
pub const SCNxPTR = SCNx16;
pub const __SFR_OFFSET = 0x20;
pub inline fn _SFR_MEM8(mem_addr: anytype) @TypeOf(_MMIO_BYTE(mem_addr)) {
    return _MMIO_BYTE(mem_addr);
}
pub inline fn _SFR_MEM16(mem_addr: anytype) @TypeOf(_MMIO_WORD(mem_addr)) {
    return _MMIO_WORD(mem_addr);
}
pub inline fn _SFR_MEM32(mem_addr: anytype) @TypeOf(_MMIO_DWORD(mem_addr)) {
    return _MMIO_DWORD(mem_addr);
}
pub inline fn _SFR_IO8(io_addr: anytype) @TypeOf(_MMIO_BYTE(io_addr + __SFR_OFFSET)) {
    return _MMIO_BYTE(io_addr + __SFR_OFFSET);
}
pub inline fn _SFR_IO16(io_addr: anytype) @TypeOf(_MMIO_WORD(io_addr + __SFR_OFFSET)) {
    return _MMIO_WORD(io_addr + __SFR_OFFSET);
}
pub inline fn _SFR_MEM_ADDR(sfr: anytype) @TypeOf(u16 & sfr) {
    return u16 & sfr;
}
pub inline fn _SFR_IO_ADDR(sfr: anytype) @TypeOf(_SFR_MEM_ADDR(sfr) - __SFR_OFFSET) {
    return _SFR_MEM_ADDR(sfr) - __SFR_OFFSET;
}
pub inline fn _SFR_IO_REG_P(sfr: anytype) @TypeOf(_SFR_MEM_ADDR(sfr) < (0x40 + __SFR_OFFSET)) {
    return _SFR_MEM_ADDR(sfr) < (0x40 + __SFR_OFFSET);
}
pub inline fn _SFR_ADDR(sfr: anytype) @TypeOf(_SFR_MEM_ADDR(sfr)) {
    return _SFR_MEM_ADDR(sfr);
}
pub inline fn _SFR_BYTE(sfr: anytype) @TypeOf(_MMIO_BYTE(_SFR_ADDR(sfr))) {
    return _MMIO_BYTE(_SFR_ADDR(sfr));
}
pub inline fn _SFR_WORD(sfr: anytype) @TypeOf(_MMIO_WORD(_SFR_ADDR(sfr))) {
    return _MMIO_WORD(_SFR_ADDR(sfr));
}
pub inline fn _SFR_DWORD(sfr: anytype) @TypeOf(_MMIO_DWORD(_SFR_ADDR(sfr))) {
    return _MMIO_DWORD(_SFR_ADDR(sfr));
}
pub inline fn _BV(bit: anytype) @TypeOf(1 << bit) {
    return 1 << bit;
}
pub inline fn bit_is_set(sfr: anytype, bit: anytype) @TypeOf(_SFR_BYTE(sfr) & _BV(bit)) {
    return _SFR_BYTE(sfr) & _BV(bit);
}
pub inline fn bit_is_clear(sfr: anytype, bit: anytype) @TypeOf(!(_SFR_BYTE(sfr) & _BV(bit) != 0)) {
    return !(_SFR_BYTE(sfr) & _BV(bit) != 0);
}
pub const _AVR_IOXXX_H_ = "iom32u4.h";
pub const _AVR_IOM32U4_H_ = 1;
pub const PINB = _SFR_IO8(0x03);
pub const PINB0 = 0;
pub const PINB1 = 1;
pub const PINB2 = 2;
pub const PINB3 = 3;
pub const PINB4 = 4;
pub const PINB5 = 5;
pub const PINB6 = 6;
pub const PINB7 = 7;
pub const DDRB = _SFR_IO8(0x04);
pub const DDB0 = 0;
pub const DDB1 = 1;
pub const DDB2 = 2;
pub const DDB3 = 3;
pub const DDB4 = 4;
pub const DDB5 = 5;
pub const DDB6 = 6;
pub const DDB7 = 7;
pub const PORTB = _SFR_IO8(0x05);
pub const PORTB0 = 0;
pub const PORTB1 = 1;
pub const PORTB2 = 2;
pub const PORTB3 = 3;
pub const PORTB4 = 4;
pub const PORTB5 = 5;
pub const PORTB6 = 6;
pub const PORTB7 = 7;
pub const PINC = _SFR_IO8(0x06);
pub const PINC6 = 6;
pub const PINC7 = 7;
pub const DDRC = _SFR_IO8(0x07);
pub const DDC6 = 6;
pub const DDC7 = 7;
pub const PORTC = _SFR_IO8(0x08);
pub const PORTC6 = 6;
pub const PORTC7 = 7;
pub const PIND = _SFR_IO8(0x09);
pub const PIND0 = 0;
pub const PIND1 = 1;
pub const PIND2 = 2;
pub const PIND3 = 3;
pub const PIND4 = 4;
pub const PIND5 = 5;
pub const PIND6 = 6;
pub const PIND7 = 7;
pub const DDRD = _SFR_IO8(0x0A);
pub const DDD0 = 0;
pub const DDD1 = 1;
pub const DDD2 = 2;
pub const DDD3 = 3;
pub const DDD4 = 4;
pub const DDD5 = 5;
pub const DDD6 = 6;
pub const DDD7 = 7;
pub const PORTD = _SFR_IO8(0x0B);
pub const PORTD0 = 0;
pub const PORTD1 = 1;
pub const PORTD2 = 2;
pub const PORTD3 = 3;
pub const PORTD4 = 4;
pub const PORTD5 = 5;
pub const PORTD6 = 6;
pub const PORTD7 = 7;
pub const PINE = _SFR_IO8(0x0C);
pub const PINE2 = 2;
pub const PINE6 = 6;
pub const DDRE = _SFR_IO8(0x0D);
pub const DDE2 = 2;
pub const DDE6 = 6;
pub const PORTE = _SFR_IO8(0x0E);
pub const PORTE2 = 2;
pub const PORTE6 = 6;
pub const PINF = _SFR_IO8(0x0F);
pub const PINF0 = 0;
pub const PINF1 = 1;
pub const PINF4 = 4;
pub const PINF5 = 5;
pub const PINF6 = 6;
pub const PINF7 = 7;
pub const DDRF = _SFR_IO8(0x10);
pub const DDF0 = 0;
pub const DDF1 = 1;
pub const DDF4 = 4;
pub const DDF5 = 5;
pub const DDF6 = 6;
pub const DDF7 = 7;
pub const PORTF = _SFR_IO8(0x11);
pub const PORTF0 = 0;
pub const PORTF1 = 1;
pub const PORTF4 = 4;
pub const PORTF5 = 5;
pub const PORTF6 = 6;
pub const PORTF7 = 7;
pub const TIFR0 = _SFR_IO8(0x15);
pub const TOV0 = 0;
pub const OCF0A = 1;
pub const OCF0B = 2;
pub const TIFR1 = _SFR_IO8(0x16);
pub const TOV1 = 0;
pub const OCF1A = 1;
pub const OCF1B = 2;
pub const OCF1C = 3;
pub const ICF1 = 5;
pub const TIFR3 = _SFR_IO8(0x18);
pub const TOV3 = 0;
pub const OCF3A = 1;
pub const OCF3B = 2;
pub const OCF3C = 3;
pub const ICF3 = 5;
pub const TIFR4 = _SFR_IO8(0x19);
pub const TOV4 = 2;
pub const OCF4B = 5;
pub const OCF4A = 6;
pub const OCF4D = 7;
pub const TIFR5 = _SFR_IO8(0x1A);
pub const PCIFR = _SFR_IO8(0x1B);
pub const PCIF0 = 0;
pub const EIFR = _SFR_IO8(0x1C);
pub const INTF0 = 0;
pub const INTF1 = 1;
pub const INTF2 = 2;
pub const INTF3 = 3;
pub const INTF4 = 4;
pub const INTF5 = 5;
pub const INTF6 = 6;
pub const INTF7 = 7;
pub const EIMSK = _SFR_IO8(0x1D);
pub const INT0 = 0;
pub const INT1 = 1;
pub const INT2 = 2;
pub const INT3 = 3;
pub const INT4 = 4;
pub const INT5 = 5;
pub const INT6 = 6;
pub const INT7 = 7;
pub const GPIOR0 = _SFR_IO8(0x1E);
pub const GPIOR00 = 0;
pub const GPIOR01 = 1;
pub const GPIOR02 = 2;
pub const GPIOR03 = 3;
pub const GPIOR04 = 4;
pub const GPIOR05 = 5;
pub const GPIOR06 = 6;
pub const GPIOR07 = 7;
pub const EECR = _SFR_IO8(0x1F);
pub const EERE = 0;
pub const EEPE = 1;
pub const EEMPE = 2;
pub const EERIE = 3;
pub const EEPM0 = 4;
pub const EEPM1 = 5;
pub const EEDR = _SFR_IO8(0x20);
pub const EEDR0 = 0;
pub const EEDR1 = 1;
pub const EEDR2 = 2;
pub const EEDR3 = 3;
pub const EEDR4 = 4;
pub const EEDR5 = 5;
pub const EEDR6 = 6;
pub const EEDR7 = 7;
pub const EEAR = _SFR_IO16(0x21);
pub const EEARL = _SFR_IO8(0x21);
pub const EEAR0 = 0;
pub const EEAR1 = 1;
pub const EEAR2 = 2;
pub const EEAR3 = 3;
pub const EEAR4 = 4;
pub const EEAR5 = 5;
pub const EEAR6 = 6;
pub const EEAR7 = 7;
pub const EEARH = _SFR_IO8(0x22);
pub const EEAR8 = 0;
pub const EEAR9 = 1;
pub const EEAR10 = 2;
pub const EEAR11 = 3;
pub const GTCCR = _SFR_IO8(0x23);
pub const PSRSYNC = 0;
pub const PSRASY = 1;
pub const TSM = 7;
pub const TCCR0A = _SFR_IO8(0x24);
pub const WGM00 = 0;
pub const WGM01 = 1;
pub const COM0B0 = 4;
pub const COM0B1 = 5;
pub const COM0A0 = 6;
pub const COM0A1 = 7;
pub const TCCR0B = _SFR_IO8(0x25);
pub const CS00 = 0;
pub const CS01 = 1;
pub const CS02 = 2;
pub const WGM02 = 3;
pub const FOC0B = 6;
pub const FOC0A = 7;
pub const TCNT0 = _SFR_IO8(0x26);
pub const TCNT0_0 = 0;
pub const TCNT0_1 = 1;
pub const TCNT0_2 = 2;
pub const TCNT0_3 = 3;
pub const TCNT0_4 = 4;
pub const TCNT0_5 = 5;
pub const TCNT0_6 = 6;
pub const TCNT0_7 = 7;
pub const OCR0A = _SFR_IO8(0x27);
pub const OCR0A_0 = 0;
pub const OCR0A_1 = 1;
pub const OCR0A_2 = 2;
pub const OCR0A_3 = 3;
pub const OCR0A_4 = 4;
pub const OCR0A_5 = 5;
pub const OCR0A_6 = 6;
pub const OCR0A_7 = 7;
pub const OCR0B = _SFR_IO8(0x28);
pub const OCR0B_0 = 0;
pub const OCR0B_1 = 1;
pub const OCR0B_2 = 2;
pub const OCR0B_3 = 3;
pub const OCR0B_4 = 4;
pub const OCR0B_5 = 5;
pub const OCR0B_6 = 6;
pub const OCR0B_7 = 7;
pub const PLLCSR = _SFR_IO8(0x29);
pub const PLOCK = 0;
pub const PLLE = 1;
pub const PINDIV = 4;
pub const GPIOR1 = _SFR_IO8(0x2A);
pub const GPIOR10 = 0;
pub const GPIOR11 = 1;
pub const GPIOR12 = 2;
pub const GPIOR13 = 3;
pub const GPIOR14 = 4;
pub const GPIOR15 = 5;
pub const GPIOR16 = 6;
pub const GPIOR17 = 7;
pub const GPIOR2 = _SFR_IO8(0x2B);
pub const GPIOR20 = 0;
pub const GPIOR21 = 1;
pub const GPIOR22 = 2;
pub const GPIOR23 = 3;
pub const GPIOR24 = 4;
pub const GPIOR25 = 5;
pub const GPIOR26 = 6;
pub const GPIOR27 = 7;
pub const SPCR = _SFR_IO8(0x2C);
pub const SPR0 = 0;
pub const SPR1 = 1;
pub const CPHA = 2;
pub const CPOL = 3;
pub const MSTR = 4;
pub const DORD = 5;
pub const SPE = 6;
pub const SPIE = 7;
pub const SPSR = _SFR_IO8(0x2D);
pub const SPI2X = 0;
pub const WCOL = 6;
pub const SPIF = 7;
pub const SPDR = _SFR_IO8(0x2E);
pub const SPDR0 = 0;
pub const SPDR1 = 1;
pub const SPDR2 = 2;
pub const SPDR3 = 3;
pub const SPDR4 = 4;
pub const SPDR5 = 5;
pub const SPDR6 = 6;
pub const SPDR7 = 7;
pub const ACSR = _SFR_IO8(0x30);
pub const ACIS0 = 0;
pub const ACIS1 = 1;
pub const ACIC = 2;
pub const ACIE = 3;
pub const ACI = 4;
pub const ACO = 5;
pub const ACBG = 6;
pub const ACD = 7;
pub const OCDR = _SFR_IO8(0x31);
pub const OCDR0 = 0;
pub const OCDR1 = 1;
pub const OCDR2 = 2;
pub const OCDR3 = 3;
pub const OCDR4 = 4;
pub const OCDR5 = 5;
pub const OCDR6 = 6;
pub const OCDR7 = 7;
pub const PLLFRQ = _SFR_IO8(0x32);
pub const PDIV0 = 0;
pub const PDIV1 = 1;
pub const PDIV2 = 2;
pub const PDIV3 = 3;
pub const PLLTM0 = 4;
pub const PLLTM1 = 5;
pub const PLLUSB = 6;
pub const PINMUX = 7;
pub const SMCR = _SFR_IO8(0x33);
pub const SE = 0;
pub const SM0 = 1;
pub const SM1 = 2;
pub const SM2 = 3;
pub const MCUSR = _SFR_IO8(0x34);
pub const PORF = 0;
pub const EXTRF = 1;
pub const BORF = 2;
pub const WDRF = 3;
pub const JTRF = 4;
pub const MCUCR = _SFR_IO8(0x35);
pub const IVCE = 0;
pub const IVSEL = 1;
pub const PUD = 4;
pub const JTD = 7;
pub const SPMCSR = _SFR_IO8(0x37);
pub const SPMEN = 0;
pub const PGERS = 1;
pub const PGWRT = 2;
pub const BLBSET = 3;
pub const RWWSRE = 4;
pub const SIGRD = 5;
pub const RWWSB = 6;
pub const SPMIE = 7;
pub const RAMPZ = _SFR_IO8(0x3B);
pub const RAMPZ0 = 0;
pub const EIND = _SFR_IO8(0x3C);
pub const EIND0 = 0;
pub const WDTCSR = _SFR_MEM8(0x60);
pub const WDP0 = 0;
pub const WDP1 = 1;
pub const WDP2 = 2;
pub const WDE = 3;
pub const WDCE = 4;
pub const WDP3 = 5;
pub const WDIE = 6;
pub const WDIF = 7;
pub const CLKPR = _SFR_MEM8(0x61);
pub const CLKPS0 = 0;
pub const CLKPS1 = 1;
pub const CLKPS2 = 2;
pub const CLKPS3 = 3;
pub const CLKPCE = 7;
pub const PRR0 = _SFR_MEM8(0x64);
pub const PRADC = 0;
pub const PRUSART0 = 1;
pub const PRSPI = 2;
pub const PRTIM1 = 3;
pub const PRTIM0 = 5;
pub const PRTIM2 = 6;
pub const PRTWI = 7;
pub const __AVR_HAVE_PRR0 = ((((((1 << PRADC) | (1 << PRUSART0)) | (1 << PRSPI)) | (1 << PRTIM1)) | (1 << PRTIM0)) | (1 << PRTIM2)) | (1 << PRTWI);
pub const PRR1 = _SFR_MEM8(0x65);
pub const PRUSART1 = 0;
pub const PRTIM3 = 3;
pub const PRUSB = 7;
pub const __AVR_HAVE_PRR1 = ((1 << PRUSART1) | (1 << PRTIM3)) | (1 << PRUSB);
pub const OSCCAL = _SFR_MEM8(0x66);
pub const CAL0 = 0;
pub const CAL1 = 1;
pub const CAL2 = 2;
pub const CAL3 = 3;
pub const CAL4 = 4;
pub const CAL5 = 5;
pub const CAL6 = 6;
pub const CAL7 = 7;
pub const RCCTRL = _SFR_MEM8(0x67);
pub const RCFREQ = 0;
pub const PCICR = _SFR_MEM8(0x68);
pub const PCIE0 = 0;
pub const EICRA = _SFR_MEM8(0x69);
pub const ISC00 = 0;
pub const ISC01 = 1;
pub const ISC10 = 2;
pub const ISC11 = 3;
pub const ISC20 = 4;
pub const ISC21 = 5;
pub const ISC30 = 6;
pub const ISC31 = 7;
pub const EICRB = _SFR_MEM8(0x6A);
pub const ISC40 = 0;
pub const ISC41 = 1;
pub const ISC50 = 2;
pub const ISC51 = 3;
pub const ISC60 = 4;
pub const ISC61 = 5;
pub const ISC70 = 6;
pub const ISC71 = 7;
pub const PCMSK0 = _SFR_MEM8(0x6B);
pub const PCINT0 = 0;
pub const PCINT1 = 1;
pub const PCINT2 = 2;
pub const PCINT3 = 3;
pub const PCINT4 = 4;
pub const PCINT5 = 5;
pub const PCINT6 = 6;
pub const PCINT7 = 7;
pub const TIMSK0 = _SFR_MEM8(0x6E);
pub const TOIE0 = 0;
pub const OCIE0A = 1;
pub const OCIE0B = 2;
pub const TIMSK1 = _SFR_MEM8(0x6F);
pub const TOIE1 = 0;
pub const OCIE1A = 1;
pub const OCIE1B = 2;
pub const OCIE1C = 3;
pub const ICIE1 = 5;
pub const TIMSK3 = _SFR_MEM8(0x71);
pub const TOIE3 = 0;
pub const OCIE3A = 1;
pub const OCIE3B = 2;
pub const OCIE3C = 3;
pub const ICIE3 = 5;
pub const TIMSK4 = _SFR_MEM8(0x72);
pub const TOIE4 = 2;
pub const OCIE4B = 5;
pub const OCIE4A = 6;
pub const OCIE4D = 7;
pub const ADC = _SFR_MEM16(0x78);
pub const ADCW = _SFR_MEM16(0x78);
pub const ADCL = _SFR_MEM8(0x78);
pub const ADCL0 = 0;
pub const ADCL1 = 1;
pub const ADCL2 = 2;
pub const ADCL3 = 3;
pub const ADCL4 = 4;
pub const ADCL5 = 5;
pub const ADCL6 = 6;
pub const ADCL7 = 7;
pub const ADCH = _SFR_MEM8(0x79);
pub const ADCH0 = 0;
pub const ADCH1 = 1;
pub const ADCH2 = 2;
pub const ADCH3 = 3;
pub const ADCH4 = 4;
pub const ADCH5 = 5;
pub const ADCH6 = 6;
pub const ADCH7 = 7;
pub const ADCSRA = _SFR_MEM8(0x7A);
pub const ADPS0 = 0;
pub const ADPS1 = 1;
pub const ADPS2 = 2;
pub const ADIE = 3;
pub const ADIF = 4;
pub const ADATE = 5;
pub const ADSC = 6;
pub const ADEN = 7;
pub const ADCSRB = _SFR_MEM8(0x7B);
pub const ADTS0 = 0;
pub const ADTS1 = 1;
pub const ADTS2 = 2;
pub const ADTS3 = 3;
pub const MUX5 = 5;
pub const ACME = 6;
pub const ADHSM = 7;
pub const ADMUX = _SFR_MEM8(0x7C);
pub const MUX0 = 0;
pub const MUX1 = 1;
pub const MUX2 = 2;
pub const MUX3 = 3;
pub const MUX4 = 4;
pub const ADLAR = 5;
pub const REFS0 = 6;
pub const REFS1 = 7;
pub const DIDR2 = _SFR_MEM8(0x7D);
pub const ADC8D = 0;
pub const ADC9D = 1;
pub const ADC10D = 2;
pub const ADC11D = 3;
pub const ADC12D = 4;
pub const ADC13D = 5;
pub const DIDR0 = _SFR_MEM8(0x7E);
pub const ADC0D = 0;
pub const ADC1D = 1;
pub const ADC2D = 2;
pub const ADC3D = 3;
pub const ADC4D = 4;
pub const ADC5D = 5;
pub const ADC6D = 6;
pub const ADC7D = 7;
pub const DIDR1 = _SFR_MEM8(0x7F);
pub const AIN0D = 0;
pub const AIN1D = 1;
pub const TCCR1A = _SFR_MEM8(0x80);
pub const WGM10 = 0;
pub const WGM11 = 1;
pub const COM1C0 = 2;
pub const COM1C1 = 3;
pub const COM1B0 = 4;
pub const COM1B1 = 5;
pub const COM1A0 = 6;
pub const COM1A1 = 7;
pub const TCCR1B = _SFR_MEM8(0x81);
pub const CS10 = 0;
pub const CS11 = 1;
pub const CS12 = 2;
pub const WGM12 = 3;
pub const WGM13 = 4;
pub const ICES1 = 6;
pub const ICNC1 = 7;
pub const TCCR1C = _SFR_MEM8(0x82);
pub const FOC1C = 5;
pub const FOC1B = 6;
pub const FOC1A = 7;
pub const TCNT1 = _SFR_MEM16(0x84);
pub const TCNT1L = _SFR_MEM8(0x84);
pub const TCNT1L0 = 0;
pub const TCNT1L1 = 1;
pub const TCNT1L2 = 2;
pub const TCNT1L3 = 3;
pub const TCNT1L4 = 4;
pub const TCNT1L5 = 5;
pub const TCNT1L6 = 6;
pub const TCNT1L7 = 7;
pub const TCNT1H = _SFR_MEM8(0x85);
pub const TCNT1H0 = 0;
pub const TCNT1H1 = 1;
pub const TCNT1H2 = 2;
pub const TCNT1H3 = 3;
pub const TCNT1H4 = 4;
pub const TCNT1H5 = 5;
pub const TCNT1H6 = 6;
pub const TCNT1H7 = 7;
pub const ICR1 = _SFR_MEM16(0x86);
pub const ICR1L = _SFR_MEM8(0x86);
pub const ICR1L0 = 0;
pub const ICR1L1 = 1;
pub const ICR1L2 = 2;
pub const ICR1L3 = 3;
pub const ICR1L4 = 4;
pub const ICR1L5 = 5;
pub const ICR1L6 = 6;
pub const ICR1L7 = 7;
pub const ICR1H = _SFR_MEM8(0x87);
pub const ICR1H0 = 0;
pub const ICR1H1 = 1;
pub const ICR1H2 = 2;
pub const ICR1H3 = 3;
pub const ICR1H4 = 4;
pub const ICR1H5 = 5;
pub const ICR1H6 = 6;
pub const ICR1H7 = 7;
pub const OCR1A = _SFR_MEM16(0x88);
pub const OCR1AL = _SFR_MEM8(0x88);
pub const OCR1AL0 = 0;
pub const OCR1AL1 = 1;
pub const OCR1AL2 = 2;
pub const OCR1AL3 = 3;
pub const OCR1AL4 = 4;
pub const OCR1AL5 = 5;
pub const OCR1AL6 = 6;
pub const OCR1AL7 = 7;
pub const OCR1AH = _SFR_MEM8(0x89);
pub const OCR1AH0 = 0;
pub const OCR1AH1 = 1;
pub const OCR1AH2 = 2;
pub const OCR1AH3 = 3;
pub const OCR1AH4 = 4;
pub const OCR1AH5 = 5;
pub const OCR1AH6 = 6;
pub const OCR1AH7 = 7;
pub const OCR1B = _SFR_MEM16(0x8A);
pub const OCR1BL = _SFR_MEM8(0x8A);
pub const OCR1BL0 = 0;
pub const OCR1BL1 = 1;
pub const OCR1BL2 = 2;
pub const OCR1BL3 = 3;
pub const OCR1BL4 = 4;
pub const OCR1BL5 = 5;
pub const OCR1BL6 = 6;
pub const OCR1BL7 = 7;
pub const OCR1BH = _SFR_MEM8(0x8B);
pub const OCR1BH0 = 0;
pub const OCR1BH1 = 1;
pub const OCR1BH2 = 2;
pub const OCR1BH3 = 3;
pub const OCR1BH4 = 4;
pub const OCR1BH5 = 5;
pub const OCR1BH6 = 6;
pub const OCR1BH7 = 7;
pub const OCR1C = _SFR_MEM16(0x8C);
pub const OCR1CL = _SFR_MEM8(0x8C);
pub const OCR1CL0 = 0;
pub const OCR1CL1 = 1;
pub const OCR1CL2 = 2;
pub const OCR1CL3 = 3;
pub const OCR1CL4 = 4;
pub const OCR1CL5 = 5;
pub const OCR1CL6 = 6;
pub const OCR1CL7 = 7;
pub const OCR1CH = _SFR_MEM8(0x8D);
pub const OCR1CH0 = 0;
pub const OCR1CH1 = 1;
pub const OCR1CH2 = 2;
pub const OCR1CH3 = 3;
pub const OCR1CH4 = 4;
pub const OCR1CH5 = 5;
pub const OCR1CH6 = 6;
pub const OCR1CH7 = 7;
pub const TCCR3A = _SFR_MEM8(0x90);
pub const WGM30 = 0;
pub const WGM31 = 1;
pub const COM3C0 = 2;
pub const COM3C1 = 3;
pub const COM3B0 = 4;
pub const COM3B1 = 5;
pub const COM3A0 = 6;
pub const COM3A1 = 7;
pub const TCCR3B = _SFR_MEM8(0x91);
pub const CS30 = 0;
pub const CS31 = 1;
pub const CS32 = 2;
pub const WGM32 = 3;
pub const WGM33 = 4;
pub const ICES3 = 6;
pub const ICNC3 = 7;
pub const TCCR3C = _SFR_MEM8(0x92);
pub const FOC3C = 5;
pub const FOC3B = 6;
pub const FOC3A = 7;
pub const TCNT3 = _SFR_MEM16(0x94);
pub const TCNT3L = _SFR_MEM8(0x94);
pub const TCNT3L0 = 0;
pub const TCNT3L1 = 1;
pub const TCNT3L2 = 2;
pub const TCNT3L3 = 3;
pub const TCNT3L4 = 4;
pub const TCNT3L5 = 5;
pub const TCNT3L6 = 6;
pub const TCNT3L7 = 7;
pub const TCNT3H = _SFR_MEM8(0x95);
pub const TCNT3H0 = 0;
pub const TCNT3H1 = 1;
pub const TCNT3H2 = 2;
pub const TCNT3H3 = 3;
pub const TCNT3H4 = 4;
pub const TCNT3H5 = 5;
pub const TCNT3H6 = 6;
pub const TCNT3H7 = 7;
pub const ICR3 = _SFR_MEM16(0x96);
pub const ICR3L = _SFR_MEM8(0x96);
pub const ICR3L0 = 0;
pub const ICR3L1 = 1;
pub const ICR3L2 = 2;
pub const ICR3L3 = 3;
pub const ICR3L4 = 4;
pub const ICR3L5 = 5;
pub const ICR3L6 = 6;
pub const ICR3L7 = 7;
pub const ICR3H = _SFR_MEM8(0x97);
pub const ICR3H0 = 0;
pub const ICR3H1 = 1;
pub const ICR3H2 = 2;
pub const ICR3H3 = 3;
pub const ICR3H4 = 4;
pub const ICR3H5 = 5;
pub const ICR3H6 = 6;
pub const ICR3H7 = 7;
pub const OCR3A = _SFR_MEM16(0x98);
pub const OCR3AL = _SFR_MEM8(0x98);
pub const OCR3AL0 = 0;
pub const OCR3AL1 = 1;
pub const OCR3AL2 = 2;
pub const OCR3AL3 = 3;
pub const OCR3AL4 = 4;
pub const OCR3AL5 = 5;
pub const OCR3AL6 = 6;
pub const OCR3AL7 = 7;
pub const OCR3AH = _SFR_MEM8(0x99);
pub const OCR3AH0 = 0;
pub const OCR3AH1 = 1;
pub const OCR3AH2 = 2;
pub const OCR3AH3 = 3;
pub const OCR3AH4 = 4;
pub const OCR3AH5 = 5;
pub const OCR3AH6 = 6;
pub const OCR3AH7 = 7;
pub const OCR3B = _SFR_MEM16(0x9A);
pub const OCR3BL = _SFR_MEM8(0x9A);
pub const OCR3BL0 = 0;
pub const OCR3BL1 = 1;
pub const OCR3BL2 = 2;
pub const OCR3BL3 = 3;
pub const OCR3BL4 = 4;
pub const OCR3BL5 = 5;
pub const OCR3BL6 = 6;
pub const OCR3BL7 = 7;
pub const OCR3BH = _SFR_MEM8(0x9B);
pub const OCR3BH0 = 0;
pub const OCR3BH1 = 1;
pub const OCR3BH2 = 2;
pub const OCR3BH3 = 3;
pub const OCR3BH4 = 4;
pub const OCR3BH5 = 5;
pub const OCR3BH6 = 6;
pub const OCR3BH7 = 7;
pub const OCR3C = _SFR_MEM16(0x9C);
pub const OCR3CL = _SFR_MEM8(0x9C);
pub const OCR3CL0 = 0;
pub const OCR3CL1 = 1;
pub const OCR3CL2 = 2;
pub const OCR3CL3 = 3;
pub const OCR3CL4 = 4;
pub const OCR3CL5 = 5;
pub const OCR3CL6 = 6;
pub const OCR3CL7 = 7;
pub const OCR3CH = _SFR_MEM8(0x9D);
pub const OCR3CH0 = 0;
pub const OCR3CH1 = 1;
pub const OCR3CH2 = 2;
pub const OCR3CH3 = 3;
pub const OCR3CH4 = 4;
pub const OCR3CH5 = 5;
pub const OCR3CH6 = 6;
pub const OCR3CH7 = 7;
pub const TWBR = _SFR_MEM8(0xB8);
pub const TWBR0 = 0;
pub const TWBR1 = 1;
pub const TWBR2 = 2;
pub const TWBR3 = 3;
pub const TWBR4 = 4;
pub const TWBR5 = 5;
pub const TWBR6 = 6;
pub const TWBR7 = 7;
pub const TWSR = _SFR_MEM8(0xB9);
pub const TWPS0 = 0;
pub const TWPS1 = 1;
pub const TWS3 = 3;
pub const TWS4 = 4;
pub const TWS5 = 5;
pub const TWS6 = 6;
pub const TWS7 = 7;
pub const TWAR = _SFR_MEM8(0xBA);
pub const TWGCE = 0;
pub const TWA0 = 1;
pub const TWA1 = 2;
pub const TWA2 = 3;
pub const TWA3 = 4;
pub const TWA4 = 5;
pub const TWA5 = 6;
pub const TWA6 = 7;
pub const TWDR = _SFR_MEM8(0xBB);
pub const TWD0 = 0;
pub const TWD1 = 1;
pub const TWD2 = 2;
pub const TWD3 = 3;
pub const TWD4 = 4;
pub const TWD5 = 5;
pub const TWD6 = 6;
pub const TWD7 = 7;
pub const TWCR = _SFR_MEM8(0xBC);
pub const TWIE = 0;
pub const TWEN = 2;
pub const TWWC = 3;
pub const TWSTO = 4;
pub const TWSTA = 5;
pub const TWEA = 6;
pub const TWINT = 7;
pub const TWAMR = _SFR_MEM8(0xBD);
pub const TWAM0 = 1;
pub const TWAM1 = 2;
pub const TWAM2 = 3;
pub const TWAM3 = 4;
pub const TWAM4 = 5;
pub const TWAM5 = 6;
pub const TWAM6 = 7;
pub const TCNT4 = _SFR_MEM16(0xBE);
pub const TCNT4L = _SFR_MEM8(0xBE);
pub const TC40 = 0;
pub const TC41 = 1;
pub const TC42 = 2;
pub const TC43 = 3;
pub const TC44 = 4;
pub const TC45 = 5;
pub const TC46 = 6;
pub const TC47 = 7;
pub const TCNT4H = _SFR_MEM8(0xBF);
pub const TC4H = _SFR_MEM8(0xBF);
pub const TC48 = 0;
pub const TC49 = 1;
pub const TC410 = 2;
pub const TCCR4A = _SFR_MEM8(0xC0);
pub const PWM4B = 0;
pub const PWM4A = 1;
pub const FOC4B = 2;
pub const FOC4A = 3;
pub const COM4B0 = 4;
pub const COM4B1 = 5;
pub const COM4A0 = 6;
pub const COM4A1 = 7;
pub const TCCR4B = _SFR_MEM8(0xC1);
pub const CS40 = 0;
pub const CS41 = 1;
pub const CS42 = 2;
pub const CS43 = 3;
pub const DTPS40 = 4;
pub const DTPS41 = 5;
pub const PSR4 = 6;
pub const PWM4X = 7;
pub const TCCR4C = _SFR_MEM8(0xC2);
pub const PWM4D = 0;
pub const FOC4D = 1;
pub const COM4D0 = 2;
pub const COM4D1 = 3;
pub const COM4B0S = 4;
pub const COM4B1S = 5;
pub const COM4A0S = 6;
pub const COM4A1S = 7;
pub const TCCR4D = _SFR_MEM8(0xC3);
pub const WGM40 = 0;
pub const WGM41 = 1;
pub const FPF4 = 2;
pub const FPAC4 = 3;
pub const FPES4 = 4;
pub const FPNC4 = 5;
pub const FPEN4 = 6;
pub const FPIE4 = 7;
pub const TCCR4E = _SFR_MEM8(0xC4);
pub const OC4OE0 = 0;
pub const OC4OE1 = 1;
pub const OC4OE2 = 2;
pub const OC4OE3 = 3;
pub const OC4OE4 = 4;
pub const OC4OE5 = 5;
pub const ENHC4 = 6;
pub const TLOCK4 = 7;
pub const CLKSEL0 = _SFR_MEM8(0xC5);
pub const CLKS = 0;
pub const EXTE = 2;
pub const RCE = 3;
pub const EXSUT0 = 4;
pub const EXSUT1 = 5;
pub const RCSUT0 = 6;
pub const RCSUT1 = 7;
pub const CLKSEL1 = _SFR_MEM8(0xC6);
pub const EXCKSEL0 = 0;
pub const EXCKSEL1 = 1;
pub const EXCKSEL2 = 2;
pub const EXCKSEL3 = 3;
pub const RCCKSEL0 = 4;
pub const RCCKSEL1 = 5;
pub const RCCKSEL2 = 6;
pub const RCCKSEL3 = 7;
pub const CLKSTA = _SFR_MEM8(0xC7);
pub const EXTON = 0;
pub const RCON = 1;
pub const UCSR1A = _SFR_MEM8(0xC8);
pub const MPCM1 = 0;
pub const U2X1 = 1;
pub const UPE1 = 2;
pub const DOR1 = 3;
pub const FE1 = 4;
pub const UDRE1 = 5;
pub const TXC1 = 6;
pub const RXC1 = 7;
pub const UCSR1B = _SFR_MEM8(0xC9);
pub const TXB81 = 0;
pub const RXB81 = 1;
pub const UCSZ12 = 2;
pub const TXEN1 = 3;
pub const RXEN1 = 4;
pub const UDRIE1 = 5;
pub const TXCIE1 = 6;
pub const RXCIE1 = 7;
pub const UCSR1C = _SFR_MEM8(0xCA);
pub const UCPOL1 = 0;
pub const UCSZ10 = 1;
pub const UCSZ11 = 2;
pub const USBS1 = 3;
pub const UPM10 = 4;
pub const UPM11 = 5;
pub const UMSEL10 = 6;
pub const UMSEL11 = 7;
pub const UCSR1D = _SFR_MEM8(0xCB);
pub const RTSEN = 0;
pub const CTSEN = 1;
pub const UBRR1 = _SFR_MEM16(0xCC);
pub const UBRR1L = _SFR_MEM8(0xCC);
pub const UBRR1H = _SFR_MEM8(0xCD);
pub const UDR1 = _SFR_MEM8(0xCE);
pub const UDR1_0 = 0;
pub const UDR1_1 = 1;
pub const UDR1_2 = 2;
pub const UDR1_3 = 3;
pub const UDR1_4 = 4;
pub const UDR1_5 = 5;
pub const UDR1_6 = 6;
pub const UDR1_7 = 7;
pub const OCR4A = _SFR_MEM8(0xCF);
pub const OCR4A0 = 0;
pub const OCR4A1 = 1;
pub const OCR4A2 = 2;
pub const OCR4A3 = 3;
pub const OCR4A4 = 4;
pub const OCR4A5 = 5;
pub const OCR4A6 = 6;
pub const OCR4A7 = 7;
pub const OCR4B = _SFR_MEM8(0xD0);
pub const OCR4B0 = 0;
pub const OCR4B1 = 1;
pub const OCR4B2 = 2;
pub const OCR4B3 = 3;
pub const OCR4B4 = 4;
pub const OCR4B5 = 5;
pub const OCR4B6 = 6;
pub const OCR4B7 = 7;
pub const OCR4C = _SFR_MEM8(0xD1);
pub const OCR4C0 = 0;
pub const OCR4C1 = 1;
pub const OCR4C2 = 2;
pub const OCR4C3 = 3;
pub const OCR4C4 = 4;
pub const OCR4C5 = 5;
pub const OCR4C6 = 6;
pub const OCR4C7 = 7;
pub const OCR4D = _SFR_MEM8(0xD2);
pub const OCR4D0 = 0;
pub const OCR4D1 = 1;
pub const OCR4D2 = 2;
pub const OCR4D3 = 3;
pub const OCR4D4 = 4;
pub const OCR4D5 = 5;
pub const OCR4D6 = 6;
pub const OCR4D7 = 7;
pub const DT4 = _SFR_MEM8(0xD4);
pub const DT4L0 = 0;
pub const DT4L1 = 1;
pub const DT4L2 = 2;
pub const DT4L3 = 3;
pub const DT4L4 = 4;
pub const DT4L5 = 5;
pub const DT4L6 = 6;
pub const DT4L7 = 7;
pub const UHWCON = _SFR_MEM8(0xD7);
pub const UVREGE = 0;
pub const USBCON = _SFR_MEM8(0xD8);
pub const VBUSTE = 0;
pub const OTGPADE = 4;
pub const FRZCLK = 5;
pub const USBE = 7;
pub const USBSTA = _SFR_MEM8(0xD9);
pub const VBUS = 0;
pub const SPEED = 3;
pub const USBINT = _SFR_MEM8(0xDA);
pub const VBUSTI = 0;
pub const UDCON = _SFR_MEM8(0xE0);
pub const DETACH = 0;
pub const RMWKUP = 1;
pub const LSM = 2;
pub const RSTCPU = 3;
pub const UDINT = _SFR_MEM8(0xE1);
pub const SUSPI = 0;
pub const SOFI = 2;
pub const EORSTI = 3;
pub const WAKEUPI = 4;
pub const EORSMI = 5;
pub const UPRSMI = 6;
pub const UDIEN = _SFR_MEM8(0xE2);
pub const SUSPE = 0;
pub const SOFE = 2;
pub const EORSTE = 3;
pub const WAKEUPE = 4;
pub const EORSME = 5;
pub const UPRSME = 6;
pub const UDADDR = _SFR_MEM8(0xE3);
pub const UADD0 = 0;
pub const UADD1 = 1;
pub const UADD2 = 2;
pub const UADD3 = 3;
pub const UADD4 = 4;
pub const UADD5 = 5;
pub const UADD6 = 6;
pub const ADDEN = 7;
pub const UDFNUM = _SFR_MEM16(0xE4);
pub const UDFNUML = _SFR_MEM8(0xE4);
pub const FNUM0 = 0;
pub const FNUM1 = 1;
pub const FNUM2 = 2;
pub const FNUM3 = 3;
pub const FNUM4 = 4;
pub const FNUM5 = 5;
pub const FNUM6 = 6;
pub const FNUM7 = 7;
pub const UDFNUMH = _SFR_MEM8(0xE5);
pub const FNUM8 = 0;
pub const FNUM9 = 1;
pub const FNUM10 = 2;
pub const UDMFN = _SFR_MEM8(0xE6);
pub const FNCERR = 4;
pub const UEINTX = _SFR_MEM8(0xE8);
pub const TXINI = 0;
pub const STALLEDI = 1;
pub const RXOUTI = 2;
pub const RXSTPI = 3;
pub const NAKOUTI = 4;
pub const RWAL = 5;
pub const NAKINI = 6;
pub const FIFOCON = 7;
pub const UENUM = _SFR_MEM8(0xE9);
pub const UENUM_0 = 0;
pub const UENUM_1 = 1;
pub const UENUM_2 = 2;
pub const UERST = _SFR_MEM8(0xEA);
pub const EPRST0 = 0;
pub const EPRST1 = 1;
pub const EPRST2 = 2;
pub const EPRST3 = 3;
pub const EPRST4 = 4;
pub const EPRST5 = 5;
pub const EPRST6 = 6;
pub const UECONX = _SFR_MEM8(0xEB);
pub const EPEN = 0;
pub const RSTDT = 3;
pub const STALLRQC = 4;
pub const STALLRQ = 5;
pub const UECFG0X = _SFR_MEM8(0xEC);
pub const EPDIR = 0;
pub const EPTYPE0 = 6;
pub const EPTYPE1 = 7;
pub const UECFG1X = _SFR_MEM8(0xED);
pub const ALLOC = 1;
pub const EPBK0 = 2;
pub const EPBK1 = 3;
pub const EPSIZE0 = 4;
pub const EPSIZE1 = 5;
pub const EPSIZE2 = 6;
pub const UESTA0X = _SFR_MEM8(0xEE);
pub const NBUSYBK0 = 0;
pub const NBUSYBK1 = 1;
pub const DTSEQ0 = 2;
pub const DTSEQ1 = 3;
pub const UNDERFI = 5;
pub const OVERFI = 6;
pub const CFGOK = 7;
pub const UESTA1X = _SFR_MEM8(0xEF);
pub const CURRBK0 = 0;
pub const CURRBK1 = 1;
pub const CTRLDIR = 2;
pub const UEIENX = _SFR_MEM8(0xF0);
pub const TXINE = 0;
pub const STALLEDE = 1;
pub const RXOUTE = 2;
pub const RXSTPE = 3;
pub const NAKOUTE = 4;
pub const NAKINE = 6;
pub const FLERRE = 7;
pub const UEDATX = _SFR_MEM8(0xF1);
pub const DAT0 = 0;
pub const DAT1 = 1;
pub const DAT2 = 2;
pub const DAT3 = 3;
pub const DAT4 = 4;
pub const DAT5 = 5;
pub const DAT6 = 6;
pub const DAT7 = 7;
pub const UEBCX = _SFR_MEM16(0xF2);
pub const UEBCLX = _SFR_MEM8(0xF2);
pub const BYCT0 = 0;
pub const BYCT1 = 1;
pub const BYCT2 = 2;
pub const BYCT3 = 3;
pub const BYCT4 = 4;
pub const BYCT5 = 5;
pub const BYCT6 = 6;
pub const BYCT7 = 7;
pub const UEBCHX = _SFR_MEM8(0xF3);
pub const UEINT = _SFR_MEM8(0xF4);
pub const EPINT0 = 0;
pub const EPINT1 = 1;
pub const EPINT2 = 2;
pub const EPINT3 = 3;
pub const EPINT4 = 4;
pub const EPINT5 = 5;
pub const EPINT6 = 6;
pub const INT0_vect_num = 1;
pub const INT0_vect = _VECTOR(1);
pub const INT1_vect_num = 2;
pub const INT1_vect = _VECTOR(2);
pub const INT2_vect_num = 3;
pub const INT2_vect = _VECTOR(3);
pub const INT3_vect_num = 4;
pub const INT3_vect = _VECTOR(4);
pub const INT6_vect_num = 7;
pub const INT6_vect = _VECTOR(7);
pub const PCINT0_vect_num = 9;
pub const PCINT0_vect = _VECTOR(9);
pub const USB_GEN_vect_num = 10;
pub const USB_GEN_vect = _VECTOR(10);
pub const USB_COM_vect_num = 11;
pub const USB_COM_vect = _VECTOR(11);
pub const WDT_vect_num = 12;
pub const WDT_vect = _VECTOR(12);
pub const TIMER1_CAPT_vect_num = 16;
pub const TIMER1_CAPT_vect = _VECTOR(16);
pub const TIMER1_COMPA_vect_num = 17;
pub const TIMER1_COMPA_vect = _VECTOR(17);
pub const TIMER1_COMPB_vect_num = 18;
pub const TIMER1_COMPB_vect = _VECTOR(18);
pub const TIMER1_COMPC_vect_num = 19;
pub const TIMER1_COMPC_vect = _VECTOR(19);
pub const TIMER1_OVF_vect_num = 20;
pub const TIMER1_OVF_vect = _VECTOR(20);
pub const TIMER0_COMPA_vect_num = 21;
pub const TIMER0_COMPA_vect = _VECTOR(21);
pub const TIMER0_COMPB_vect_num = 22;
pub const TIMER0_COMPB_vect = _VECTOR(22);
pub const TIMER0_OVF_vect_num = 23;
pub const TIMER0_OVF_vect = _VECTOR(23);
pub const SPI_STC_vect_num = 24;
pub const SPI_STC_vect = _VECTOR(24);
pub const USART1_RX_vect_num = 25;
pub const USART1_RX_vect = _VECTOR(25);
pub const USART1_UDRE_vect_num = 26;
pub const USART1_UDRE_vect = _VECTOR(26);
pub const USART1_TX_vect_num = 27;
pub const USART1_TX_vect = _VECTOR(27);
pub const ANALOG_COMP_vect_num = 28;
pub const ANALOG_COMP_vect = _VECTOR(28);
pub const ADC_vect_num = 29;
pub const ADC_vect = _VECTOR(29);
pub const EE_READY_vect_num = 30;
pub const EE_READY_vect = _VECTOR(30);
pub const TIMER3_CAPT_vect_num = 31;
pub const TIMER3_CAPT_vect = _VECTOR(31);
pub const TIMER3_COMPA_vect_num = 32;
pub const TIMER3_COMPA_vect = _VECTOR(32);
pub const TIMER3_COMPB_vect_num = 33;
pub const TIMER3_COMPB_vect = _VECTOR(33);
pub const TIMER3_COMPC_vect_num = 34;
pub const TIMER3_COMPC_vect = _VECTOR(34);
pub const TIMER3_OVF_vect_num = 35;
pub const TIMER3_OVF_vect = _VECTOR(35);
pub const TWI_vect_num = 36;
pub const TWI_vect = _VECTOR(36);
pub const SPM_READY_vect_num = 37;
pub const SPM_READY_vect = _VECTOR(37);
pub const TIMER4_COMPA_vect_num = 38;
pub const TIMER4_COMPA_vect = _VECTOR(38);
pub const TIMER4_COMPB_vect_num = 39;
pub const TIMER4_COMPB_vect = _VECTOR(39);
pub const TIMER4_COMPD_vect_num = 40;
pub const TIMER4_COMPD_vect = _VECTOR(40);
pub const TIMER4_OVF_vect_num = 41;
pub const TIMER4_OVF_vect = _VECTOR(41);
pub const TIMER4_FPF_vect_num = 42;
pub const TIMER4_FPF_vect = _VECTOR(42);
pub const _VECTORS_SIZE = 43 * 4;
pub const SPM_PAGESIZE = 128;
pub const RAMSTART = 0x100;
pub const RAMSIZE = 0xA00;
pub const RAMEND = (RAMSTART + RAMSIZE) - 1;
pub const XRAMSTART = 0x2200;
pub const XRAMSIZE = 0x10000;
pub const XRAMEND = XRAMSIZE - 1;
pub const E2END = 0x3FF;
pub const E2PAGESIZE = 4;
pub const FLASHEND = 0x7FFF;
pub const FUSE_MEMORY_SIZE = 3;
pub const LFUSE_DEFAULT = (((FUSE_CKSEL1 & FUSE_CKSEL2) & FUSE_CKSEL3) & FUSE_SUT1) & FUSE_CKDIV8;
pub const HFUSE_DEFAULT = FUSE_BOOTSZ0 & FUSE_SPIEN;
pub const EFUSE_DEFAULT = 0xFF;
pub const SIGNATURE_0 = 0x1E;
pub const SIGNATURE_1 = 0x95;
pub const SIGNATURE_2 = 0x87;
pub const SLEEP_MODE_IDLE = 0x00 << 1;
pub const SLEEP_MODE_ADC = 0x01 << 1;
pub const SLEEP_MODE_PWR_DOWN = 0x02 << 1;
pub const SLEEP_MODE_PWR_SAVE = 0x03 << 1;
pub const SLEEP_MODE_STANDBY = 0x06 << 1;
pub const SLEEP_MODE_EXT_STANDBY = 0x07 << 1;
pub const _AVR_PORTPINS_H_ = 1;
pub const PORT7 = 7;
pub const PORT6 = 6;
pub const PORT5 = 5;
pub const PORT4 = 4;
pub const PORT3 = 3;
pub const PORT2 = 2;
pub const PORT1 = 1;
pub const PORT0 = 0;
pub const DD7 = 7;
pub const DD6 = 6;
pub const DD5 = 5;
pub const DD4 = 4;
pub const DD3 = 3;
pub const DD2 = 2;
pub const DD1 = 1;
pub const DD0 = 0;
pub const PIN7 = 7;
pub const PIN6 = 6;
pub const PIN5 = 5;
pub const PIN4 = 4;
pub const PIN3 = 3;
pub const PIN2 = 2;
pub const PIN1 = 1;
pub const PIN0 = 0;
pub const PB0 = PORTB0;
pub const PB1 = PORTB1;
pub const PB2 = PORTB2;
pub const PB3 = PORTB3;
pub const PB4 = PORTB4;
pub const PB5 = PORTB5;
pub const PB6 = PORTB6;
pub const PB7 = PORTB7;
pub const PC6 = PORTC6;
pub const PC7 = PORTC7;
pub const PD0 = PORTD0;
pub const PD1 = PORTD1;
pub const PD2 = PORTD2;
pub const PD3 = PORTD3;
pub const PD4 = PORTD4;
pub const PD5 = PORTD5;
pub const PD6 = PORTD6;
pub const PD7 = PORTD7;
pub const PE2 = PORTE2;
pub const PE6 = PORTE6;
pub const PF0 = PORTF0;
pub const PF1 = PORTF1;
pub const PF4 = PORTF4;
pub const PF5 = PORTF5;
pub const PF6 = PORTF6;
pub const PF7 = PORTF7;
pub const SPL = _SFR_IO8(0x3D);
pub const SP = _SFR_IO16(0x3D);
pub const SPH = _SFR_IO8(0x3E);
pub const SREG = _SFR_IO8(0x3F);
pub const SREG_C = 0;
pub const SREG_Z = 1;
pub const SREG_N = 2;
pub const SREG_V = 3;
pub const SREG_S = 4;
pub const SREG_H = 5;
pub const SREG_T = 6;
pub const SREG_I = 7;
pub const XL = r26;
pub const XH = r27;
pub const YL = r28;
pub const YH = r29;
pub const ZL = r30;
pub const ZH = r31;
pub const AVR_STATUS_REG = SREG;
pub const AVR_STATUS_ADDR = _SFR_IO_ADDR(SREG);
pub const AVR_STACK_POINTER_REG = SP;
pub const AVR_STACK_POINTER_ADDR = _SFR_IO_ADDR(SP);
pub const _HAVE_AVR_STACK_POINTER_HI = 1;
pub const AVR_STACK_POINTER_HI_REG = SPH;
pub const AVR_STACK_POINTER_HI_ADDR = _SFR_IO_ADDR(SPH);
pub const AVR_STACK_POINTER_LO_REG = SPL;
pub const AVR_STACK_POINTER_LO_ADDR = _SFR_IO_ADDR(SPL);
pub const AVR_RAMPZ_REG = RAMPZ;
pub const AVR_RAMPZ_ADDR = _SFR_IO_ADDR(RAMPZ);
pub const AVR_EXTENDED_INDIRECT_REG = EIND;
pub const AVR_EXTENDED_INDIRECT_ADDR = _SFR_IO_ADDR(EIND);
pub const __AVR_LIBC_VERSION_STRING__ = "2.0.0";
pub const __AVR_LIBC_VERSION__ = @as(c_ulong, 20000);
pub const __AVR_LIBC_DATE_STRING__ = "20150208";
pub const __AVR_LIBC_DATE_ = @as(c_ulong, 20150208);
pub const __AVR_LIBC_MAJOR__ = 2;
pub const __AVR_LIBC_MINOR__ = 0;
pub const __AVR_LIBC_REVISION__ = 0;
pub const _AVR_FUSE_H_ = 1;
pub const FUSEMEM = __attribute__(blk: {
    _ = __used__;
    break :blk __section__(".fuse");
});
pub const FUSES = __fuse_t ++ __fuse ++ FUSEMEM;
pub const _AVR_LOCK_H_ = 1;
pub const LOCKMEM = __attribute__(blk: {
    _ = __used__;
    break :blk __section__(".lock");
});
pub const LOCKBITS = u8 ++ __lock ++ LOCKMEM;
pub const LB_MODE_1 = 0xFF;
pub const LB_MODE_2 = 0xFE;
pub const LB_MODE_3 = 0xFC;
pub const BLB0_MODE_1 = 0xFF;
pub const BLB0_MODE_2 = 0xFB;
pub const BLB0_MODE_3 = 0xF3;
pub const BLB0_MODE_4 = 0xF7;
pub const BLB1_MODE_1 = 0xFF;
pub const BLB1_MODE_2 = 0xEF;
pub const BLB1_MODE_3 = 0xCF;
pub const BLB1_MODE_4 = 0xDF;
pub const LOCKBITS_DEFAULT = 0xFF;
pub const __INTR_ATTRS = blk: {
    _ = used;
    break :blk externally_visible;
};
pub const BADISR_vect = __vector_default;
pub const ISR_NOBLOCK = __attribute__(interrupt);
pub const ISR_NAKED = __attribute__(naked);
pub inline fn ISR_ALIASOF(v: anytype) @TypeOf(__attribute__(alias(__STRINGIFY(v)))) {
    return __attribute__(alias(__STRINGIFY(v)));
}
