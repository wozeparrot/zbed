pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const intmax_t = i64;
pub const uintmax_t = u64;
pub const int_farptr_t = i32;
pub const uint_farptr_t = u32;
pub const __fuse_t = extern struct {
    low: u8,
    high: u8,
    extended: u8,
};
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):80:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):86:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):109:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):113:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):119:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):122:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):183:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):205:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):213:9
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):343:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):344:9
pub const __CONCATenate = @compileError("unable to translate C expr: unexpected token '##'"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:290:9
pub const UINT16_MAX = @compileError("unable to translate macro: undefined identifier `U`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:346:9
pub const UINT32_MAX = @compileError("unable to translate macro: undefined identifier `U`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:361:9
pub const UINT64_MAX = @compileError("unable to translate macro: undefined identifier `U`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:378:9
pub const WCHAR_MIN = @compileError("unable to translate macro: undefined identifier `__WCHAR_MIN__`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:602:9
pub const WINT_MIN = @compileError("unable to translate macro: undefined identifier `__WINT_MIN__`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:606:9
pub const UINT8_C = @compileError("unable to translate macro: undefined identifier `U`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:644:9
pub const UINT16_C = @compileError("unable to translate macro: undefined identifier `U`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:664:9
pub const INT32_C = @compileError("unable to translate macro: undefined identifier `L`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:669:9
pub const UINT32_C = @compileError("unable to translate macro: undefined identifier `UL`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:674:9
pub const INT64_C = @compileError("unable to translate macro: undefined identifier `LL`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:681:9
pub const UINT64_C = @compileError("unable to translate macro: undefined identifier `ULL`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:686:9
pub const INTMAX_C = @compileError("unable to translate macro: undefined identifier `LL`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:691:9
pub const UINTMAX_C = @compileError("unable to translate macro: undefined identifier `ULL`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/stdint.h:696:9
pub const _MMIO_BYTE = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/sfr_defs.h:128:9
pub const _MMIO_WORD = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/sfr_defs.h:129:9
pub const _MMIO_DWORD = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/sfr_defs.h:130:9
pub const _VECTOR = @compileError("unable to translate macro: undefined identifier `__vector_`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/sfr_defs.h:213:9
pub const loop_until_bit_is_set = @compileError("unable to translate C expr: unexpected token 'do'"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/sfr_defs.h:254:9
pub const loop_until_bit_is_clear = @compileError("unable to translate C expr: unexpected token 'do'"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/sfr_defs.h:263:9
pub const XL = @compileError("unable to translate macro: undefined identifier `r26`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/common.h:215:11
pub const XH = @compileError("unable to translate macro: undefined identifier `r27`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/common.h:216:11
pub const YL = @compileError("unable to translate macro: undefined identifier `r28`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/common.h:217:11
pub const YH = @compileError("unable to translate macro: undefined identifier `r29`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/common.h:218:11
pub const ZL = @compileError("unable to translate macro: undefined identifier `r30`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/common.h:220:9
pub const ZH = @compileError("unable to translate macro: undefined identifier `r31`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/common.h:221:9
pub const FUSEMEM = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/fuse.h:226:9
pub const FUSES = @compileError("unable to translate macro: undefined identifier `__fuse`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/fuse.h:267:13
pub const LOCKMEM = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/lock.h:190:9
pub const LOCKBITS = @compileError("unable to translate macro: undefined identifier `__lock`"); // /nix/store/kwsjbvrls9sbgfh6vydywvbcvj0wh753-avr-libc-avr-2.1.0/avr/include/avr/lock.h:194:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 15);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 3);
pub const __clang_version__ = "15.0.3 (git@github.com:ziglang/zig-bootstrap.git 0ce789d0f7a4d89fdc4d9571209b6874d3e260c9)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 15.0.3 (git@github.com:ziglang/zig-bootstrap.git 0ce789d0f7a4d89fdc4d9571209b6874d3e260c9)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __PIE__ = @as(c_int, 2);
pub const __pie__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __znver3 = @as(c_int, 1);
pub const __znver3__ = @as(c_int, 1);
pub const __tune_znver3__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MWAITX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __PKU__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __WBNOINVD__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __RDPRU__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __AVR_ATmega32U4__ = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const _AVR_IO_H_ = "";
pub const _AVR_SFR_DEFS_H_ = @as(c_int, 1);
pub const _SFR_ASM_COMPAT = @as(c_int, 0);
pub const __INTTYPES_H_ = "";
pub const __STDINT_H_ = "";
pub const __USING_MINT8 = @as(c_int, 0);
pub inline fn __CONCAT(left: anytype, right: anytype) @TypeOf(__CONCATenate(left, right)) {
    return __CONCATenate(left, right);
}
pub const INT8_MAX = @as(c_int, 0x7f);
pub const INT8_MIN = -INT8_MAX - @as(c_int, 1);
pub const UINT8_MAX = (INT8_MAX * @as(c_int, 2)) + @as(c_int, 1);
pub const INT16_MAX = @as(c_int, 0x7fff);
pub const INT16_MIN = -INT16_MAX - @as(c_int, 1);
pub const INT32_MAX = @as(c_long, 0x7fffffff);
pub const INT32_MIN = -INT32_MAX - @as(c_long, 1);
pub const INT64_MAX = @as(c_longlong, 0x7fffffffffffffff);
pub const INT64_MIN = -INT64_MAX - @as(c_longlong, 1);
pub const INT_LEAST8_MAX = INT8_MAX;
pub const INT_LEAST8_MIN = INT8_MIN;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const INT_FAST8_MAX = INT8_MAX;
pub const INT_FAST8_MIN = INT8_MIN;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const INT_FAST16_MAX = INT16_MAX;
pub const INT_FAST16_MIN = INT16_MIN;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const INT_FAST32_MAX = INT32_MAX;
pub const INT_FAST32_MIN = INT32_MIN;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const INT_FAST64_MAX = INT64_MAX;
pub const INT_FAST64_MIN = INT64_MIN;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INTPTR_MAX = INT16_MAX;
pub const INTPTR_MIN = INT16_MIN;
pub const UINTPTR_MAX = UINT16_MAX;
pub const INTMAX_MAX = INT64_MAX;
pub const INTMAX_MIN = INT64_MIN;
pub const UINTMAX_MAX = UINT64_MAX;
pub const PTRDIFF_MAX = INT16_MAX;
pub const PTRDIFF_MIN = INT16_MIN;
pub const SIG_ATOMIC_MAX = INT8_MAX;
pub const SIG_ATOMIC_MIN = INT8_MIN;
pub const SIZE_MAX = UINT16_MAX;
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WINT_MAX = __WINT_MAX__;
pub inline fn INT8_C(value: anytype) i8 {
    return @import("std").zig.c_translation.cast(i8, value);
}
pub inline fn INT16_C(value: anytype) @TypeOf(value) {
    return value;
}
pub const PRId8 = "d";
pub const PRIdLEAST8 = "d";
pub const PRIdFAST8 = "d";
pub const PRIi8 = "i";
pub const PRIiLEAST8 = "i";
pub const PRIiFAST8 = "i";
pub const PRId16 = "d";
pub const PRIdLEAST16 = "d";
pub const PRIdFAST16 = "d";
pub const PRIi16 = "i";
pub const PRIiLEAST16 = "i";
pub const PRIiFAST16 = "i";
pub const PRId32 = "ld";
pub const PRIdLEAST32 = "ld";
pub const PRIdFAST32 = "ld";
pub const PRIi32 = "li";
pub const PRIiLEAST32 = "li";
pub const PRIiFAST32 = "li";
pub const PRIdPTR = PRId16;
pub const PRIiPTR = PRIi16;
pub const PRIo8 = "o";
pub const PRIoLEAST8 = "o";
pub const PRIoFAST8 = "o";
pub const PRIu8 = "u";
pub const PRIuLEAST8 = "u";
pub const PRIuFAST8 = "u";
pub const PRIx8 = "x";
pub const PRIxLEAST8 = "x";
pub const PRIxFAST8 = "x";
pub const PRIX8 = "X";
pub const PRIXLEAST8 = "X";
pub const PRIXFAST8 = "X";
pub const PRIo16 = "o";
pub const PRIoLEAST16 = "o";
pub const PRIoFAST16 = "o";
pub const PRIu16 = "u";
pub const PRIuLEAST16 = "u";
pub const PRIuFAST16 = "u";
pub const PRIx16 = "x";
pub const PRIxLEAST16 = "x";
pub const PRIxFAST16 = "x";
pub const PRIX16 = "X";
pub const PRIXLEAST16 = "X";
pub const PRIXFAST16 = "X";
pub const PRIo32 = "lo";
pub const PRIoLEAST32 = "lo";
pub const PRIoFAST32 = "lo";
pub const PRIu32 = "lu";
pub const PRIuLEAST32 = "lu";
pub const PRIuFAST32 = "lu";
pub const PRIx32 = "lx";
pub const PRIxLEAST32 = "lx";
pub const PRIxFAST32 = "lx";
pub const PRIX32 = "lX";
pub const PRIXLEAST32 = "lX";
pub const PRIXFAST32 = "lX";
pub const PRIoPTR = PRIo16;
pub const PRIuPTR = PRIu16;
pub const PRIxPTR = PRIx16;
pub const PRIXPTR = PRIX16;
pub const SCNd8 = "hhd";
pub const SCNdLEAST8 = "hhd";
pub const SCNdFAST8 = "hhd";
pub const SCNi8 = "hhi";
pub const SCNiLEAST8 = "hhi";
pub const SCNiFAST8 = "hhi";
pub const SCNd16 = "d";
pub const SCNdLEAST16 = "d";
pub const SCNdFAST16 = "d";
pub const SCNi16 = "i";
pub const SCNiLEAST16 = "i";
pub const SCNiFAST16 = "i";
pub const SCNd32 = "ld";
pub const SCNdLEAST32 = "ld";
pub const SCNdFAST32 = "ld";
pub const SCNi32 = "li";
pub const SCNiLEAST32 = "li";
pub const SCNiFAST32 = "li";
pub const SCNdPTR = SCNd16;
pub const SCNiPTR = SCNi16;
pub const SCNo8 = "hho";
pub const SCNoLEAST8 = "hho";
pub const SCNoFAST8 = "hho";
pub const SCNu8 = "hhu";
pub const SCNuLEAST8 = "hhu";
pub const SCNuFAST8 = "hhu";
pub const SCNx8 = "hhx";
pub const SCNxLEAST8 = "hhx";
pub const SCNxFAST8 = "hhx";
pub const SCNo16 = "o";
pub const SCNoLEAST16 = "o";
pub const SCNoFAST16 = "o";
pub const SCNu16 = "u";
pub const SCNuLEAST16 = "u";
pub const SCNuFAST16 = "u";
pub const SCNx16 = "x";
pub const SCNxLEAST16 = "x";
pub const SCNxFAST16 = "x";
pub const SCNo32 = "lo";
pub const SCNoLEAST32 = "lo";
pub const SCNoFAST32 = "lo";
pub const SCNu32 = "lu";
pub const SCNuLEAST32 = "lu";
pub const SCNuFAST32 = "lu";
pub const SCNx32 = "lx";
pub const SCNxLEAST32 = "lx";
pub const SCNxFAST32 = "lx";
pub const SCNoPTR = SCNo16;
pub const SCNuPTR = SCNu16;
pub const SCNxPTR = SCNx16;
pub const __SFR_OFFSET = @as(c_int, 0x20);
pub inline fn _SFR_MEM8(mem_addr: anytype) @TypeOf(_MMIO_BYTE(mem_addr)) {
    return _MMIO_BYTE(mem_addr);
}
pub inline fn _SFR_MEM16(mem_addr: anytype) @TypeOf(_MMIO_WORD(mem_addr)) {
    return _MMIO_WORD(mem_addr);
}
pub inline fn _SFR_MEM32(mem_addr: anytype) @TypeOf(_MMIO_DWORD(mem_addr)) {
    return _MMIO_DWORD(mem_addr);
}
pub inline fn _SFR_IO8(io_addr: anytype) @TypeOf(_MMIO_BYTE(io_addr + __SFR_OFFSET)) {
    return _MMIO_BYTE(io_addr + __SFR_OFFSET);
}
pub inline fn _SFR_IO16(io_addr: anytype) @TypeOf(_MMIO_WORD(io_addr + __SFR_OFFSET)) {
    return _MMIO_WORD(io_addr + __SFR_OFFSET);
}
pub inline fn _SFR_MEM_ADDR(sfr: anytype) u16 {
    return @import("std").zig.c_translation.cast(u16, &sfr);
}
pub inline fn _SFR_IO_ADDR(sfr: anytype) @TypeOf(_SFR_MEM_ADDR(sfr) - __SFR_OFFSET) {
    return _SFR_MEM_ADDR(sfr) - __SFR_OFFSET;
}
pub inline fn _SFR_IO_REG_P(sfr: anytype) @TypeOf(_SFR_MEM_ADDR(sfr) < (@as(c_int, 0x40) + __SFR_OFFSET)) {
    return _SFR_MEM_ADDR(sfr) < (@as(c_int, 0x40) + __SFR_OFFSET);
}
pub inline fn _SFR_ADDR(sfr: anytype) @TypeOf(_SFR_MEM_ADDR(sfr)) {
    return _SFR_MEM_ADDR(sfr);
}
pub inline fn _SFR_BYTE(sfr: anytype) @TypeOf(_MMIO_BYTE(_SFR_ADDR(sfr))) {
    return _MMIO_BYTE(_SFR_ADDR(sfr));
}
pub inline fn _SFR_WORD(sfr: anytype) @TypeOf(_MMIO_WORD(_SFR_ADDR(sfr))) {
    return _MMIO_WORD(_SFR_ADDR(sfr));
}
pub inline fn _SFR_DWORD(sfr: anytype) @TypeOf(_MMIO_DWORD(_SFR_ADDR(sfr))) {
    return _MMIO_DWORD(_SFR_ADDR(sfr));
}
pub inline fn _BV(bit: anytype) @TypeOf(@as(c_int, 1) << bit) {
    return @as(c_int, 1) << bit;
}
pub inline fn bit_is_set(sfr: anytype, bit: anytype) @TypeOf(_SFR_BYTE(sfr) & _BV(bit)) {
    return _SFR_BYTE(sfr) & _BV(bit);
}
pub inline fn bit_is_clear(sfr: anytype, bit: anytype) @TypeOf(!((_SFR_BYTE(sfr) & _BV(bit)) != 0)) {
    return !((_SFR_BYTE(sfr) & _BV(bit)) != 0);
}
pub const _AVR_IOXXX_H_ = "iom32u4.h";
pub const _AVR_IOM32U4_H_ = @as(c_int, 1);
pub const PINB = _SFR_IO8(@as(c_int, 0x03));
pub const PINB0 = @as(c_int, 0);
pub const PINB1 = @as(c_int, 1);
pub const PINB2 = @as(c_int, 2);
pub const PINB3 = @as(c_int, 3);
pub const PINB4 = @as(c_int, 4);
pub const PINB5 = @as(c_int, 5);
pub const PINB6 = @as(c_int, 6);
pub const PINB7 = @as(c_int, 7);
pub const DDRB = _SFR_IO8(@as(c_int, 0x04));
pub const DDB0 = @as(c_int, 0);
pub const DDB1 = @as(c_int, 1);
pub const DDB2 = @as(c_int, 2);
pub const DDB3 = @as(c_int, 3);
pub const DDB4 = @as(c_int, 4);
pub const DDB5 = @as(c_int, 5);
pub const DDB6 = @as(c_int, 6);
pub const DDB7 = @as(c_int, 7);
pub const PORTB = _SFR_IO8(@as(c_int, 0x05));
pub const PORTB0 = @as(c_int, 0);
pub const PORTB1 = @as(c_int, 1);
pub const PORTB2 = @as(c_int, 2);
pub const PORTB3 = @as(c_int, 3);
pub const PORTB4 = @as(c_int, 4);
pub const PORTB5 = @as(c_int, 5);
pub const PORTB6 = @as(c_int, 6);
pub const PORTB7 = @as(c_int, 7);
pub const PINC = _SFR_IO8(@as(c_int, 0x06));
pub const PINC6 = @as(c_int, 6);
pub const PINC7 = @as(c_int, 7);
pub const DDRC = _SFR_IO8(@as(c_int, 0x07));
pub const DDC6 = @as(c_int, 6);
pub const DDC7 = @as(c_int, 7);
pub const PORTC = _SFR_IO8(@as(c_int, 0x08));
pub const PORTC6 = @as(c_int, 6);
pub const PORTC7 = @as(c_int, 7);
pub const PIND = _SFR_IO8(@as(c_int, 0x09));
pub const PIND0 = @as(c_int, 0);
pub const PIND1 = @as(c_int, 1);
pub const PIND2 = @as(c_int, 2);
pub const PIND3 = @as(c_int, 3);
pub const PIND4 = @as(c_int, 4);
pub const PIND5 = @as(c_int, 5);
pub const PIND6 = @as(c_int, 6);
pub const PIND7 = @as(c_int, 7);
pub const DDRD = _SFR_IO8(@as(c_int, 0x0A));
pub const DDD0 = @as(c_int, 0);
pub const DDD1 = @as(c_int, 1);
pub const DDD2 = @as(c_int, 2);
pub const DDD3 = @as(c_int, 3);
pub const DDD4 = @as(c_int, 4);
pub const DDD5 = @as(c_int, 5);
pub const DDD6 = @as(c_int, 6);
pub const DDD7 = @as(c_int, 7);
pub const PORTD = _SFR_IO8(@as(c_int, 0x0B));
pub const PORTD0 = @as(c_int, 0);
pub const PORTD1 = @as(c_int, 1);
pub const PORTD2 = @as(c_int, 2);
pub const PORTD3 = @as(c_int, 3);
pub const PORTD4 = @as(c_int, 4);
pub const PORTD5 = @as(c_int, 5);
pub const PORTD6 = @as(c_int, 6);
pub const PORTD7 = @as(c_int, 7);
pub const PINE = _SFR_IO8(@as(c_int, 0x0C));
pub const PINE2 = @as(c_int, 2);
pub const PINE6 = @as(c_int, 6);
pub const DDRE = _SFR_IO8(@as(c_int, 0x0D));
pub const DDE2 = @as(c_int, 2);
pub const DDE6 = @as(c_int, 6);
pub const PORTE = _SFR_IO8(@as(c_int, 0x0E));
pub const PORTE2 = @as(c_int, 2);
pub const PORTE6 = @as(c_int, 6);
pub const PINF = _SFR_IO8(@as(c_int, 0x0F));
pub const PINF0 = @as(c_int, 0);
pub const PINF1 = @as(c_int, 1);
pub const PINF4 = @as(c_int, 4);
pub const PINF5 = @as(c_int, 5);
pub const PINF6 = @as(c_int, 6);
pub const PINF7 = @as(c_int, 7);
pub const DDRF = _SFR_IO8(@as(c_int, 0x10));
pub const DDF0 = @as(c_int, 0);
pub const DDF1 = @as(c_int, 1);
pub const DDF4 = @as(c_int, 4);
pub const DDF5 = @as(c_int, 5);
pub const DDF6 = @as(c_int, 6);
pub const DDF7 = @as(c_int, 7);
pub const PORTF = _SFR_IO8(@as(c_int, 0x11));
pub const PORTF0 = @as(c_int, 0);
pub const PORTF1 = @as(c_int, 1);
pub const PORTF4 = @as(c_int, 4);
pub const PORTF5 = @as(c_int, 5);
pub const PORTF6 = @as(c_int, 6);
pub const PORTF7 = @as(c_int, 7);
pub const TIFR0 = _SFR_IO8(@as(c_int, 0x15));
pub const TOV0 = @as(c_int, 0);
pub const OCF0A = @as(c_int, 1);
pub const OCF0B = @as(c_int, 2);
pub const TIFR1 = _SFR_IO8(@as(c_int, 0x16));
pub const TOV1 = @as(c_int, 0);
pub const OCF1A = @as(c_int, 1);
pub const OCF1B = @as(c_int, 2);
pub const OCF1C = @as(c_int, 3);
pub const ICF1 = @as(c_int, 5);
pub const TIFR3 = _SFR_IO8(@as(c_int, 0x18));
pub const TOV3 = @as(c_int, 0);
pub const OCF3A = @as(c_int, 1);
pub const OCF3B = @as(c_int, 2);
pub const OCF3C = @as(c_int, 3);
pub const ICF3 = @as(c_int, 5);
pub const TIFR4 = _SFR_IO8(@as(c_int, 0x19));
pub const TOV4 = @as(c_int, 2);
pub const OCF4B = @as(c_int, 5);
pub const OCF4A = @as(c_int, 6);
pub const OCF4D = @as(c_int, 7);
pub const TIFR5 = _SFR_IO8(@as(c_int, 0x1A));
pub const PCIFR = _SFR_IO8(@as(c_int, 0x1B));
pub const PCIF0 = @as(c_int, 0);
pub const EIFR = _SFR_IO8(@as(c_int, 0x1C));
pub const INTF0 = @as(c_int, 0);
pub const INTF1 = @as(c_int, 1);
pub const INTF2 = @as(c_int, 2);
pub const INTF3 = @as(c_int, 3);
pub const INTF4 = @as(c_int, 4);
pub const INTF5 = @as(c_int, 5);
pub const INTF6 = @as(c_int, 6);
pub const INTF7 = @as(c_int, 7);
pub const EIMSK = _SFR_IO8(@as(c_int, 0x1D));
pub const INT0 = @as(c_int, 0);
pub const INT1 = @as(c_int, 1);
pub const INT2 = @as(c_int, 2);
pub const INT3 = @as(c_int, 3);
pub const INT4 = @as(c_int, 4);
pub const INT5 = @as(c_int, 5);
pub const INT6 = @as(c_int, 6);
pub const INT7 = @as(c_int, 7);
pub const GPIOR0 = _SFR_IO8(@as(c_int, 0x1E));
pub const GPIOR00 = @as(c_int, 0);
pub const GPIOR01 = @as(c_int, 1);
pub const GPIOR02 = @as(c_int, 2);
pub const GPIOR03 = @as(c_int, 3);
pub const GPIOR04 = @as(c_int, 4);
pub const GPIOR05 = @as(c_int, 5);
pub const GPIOR06 = @as(c_int, 6);
pub const GPIOR07 = @as(c_int, 7);
pub const EECR = _SFR_IO8(@as(c_int, 0x1F));
pub const EERE = @as(c_int, 0);
pub const EEPE = @as(c_int, 1);
pub const EEMPE = @as(c_int, 2);
pub const EERIE = @as(c_int, 3);
pub const EEPM0 = @as(c_int, 4);
pub const EEPM1 = @as(c_int, 5);
pub const EEDR = _SFR_IO8(@as(c_int, 0x20));
pub const EEDR0 = @as(c_int, 0);
pub const EEDR1 = @as(c_int, 1);
pub const EEDR2 = @as(c_int, 2);
pub const EEDR3 = @as(c_int, 3);
pub const EEDR4 = @as(c_int, 4);
pub const EEDR5 = @as(c_int, 5);
pub const EEDR6 = @as(c_int, 6);
pub const EEDR7 = @as(c_int, 7);
pub const EEAR = _SFR_IO16(@as(c_int, 0x21));
pub const EEARL = _SFR_IO8(@as(c_int, 0x21));
pub const EEAR0 = @as(c_int, 0);
pub const EEAR1 = @as(c_int, 1);
pub const EEAR2 = @as(c_int, 2);
pub const EEAR3 = @as(c_int, 3);
pub const EEAR4 = @as(c_int, 4);
pub const EEAR5 = @as(c_int, 5);
pub const EEAR6 = @as(c_int, 6);
pub const EEAR7 = @as(c_int, 7);
pub const EEARH = _SFR_IO8(@as(c_int, 0x22));
pub const EEAR8 = @as(c_int, 0);
pub const EEAR9 = @as(c_int, 1);
pub const EEAR10 = @as(c_int, 2);
pub const EEAR11 = @as(c_int, 3);
pub const GTCCR = _SFR_IO8(@as(c_int, 0x23));
pub const PSRSYNC = @as(c_int, 0);
pub const PSRASY = @as(c_int, 1);
pub const TSM = @as(c_int, 7);
pub const TCCR0A = _SFR_IO8(@as(c_int, 0x24));
pub const WGM00 = @as(c_int, 0);
pub const WGM01 = @as(c_int, 1);
pub const COM0B0 = @as(c_int, 4);
pub const COM0B1 = @as(c_int, 5);
pub const COM0A0 = @as(c_int, 6);
pub const COM0A1 = @as(c_int, 7);
pub const TCCR0B = _SFR_IO8(@as(c_int, 0x25));
pub const CS00 = @as(c_int, 0);
pub const CS01 = @as(c_int, 1);
pub const CS02 = @as(c_int, 2);
pub const WGM02 = @as(c_int, 3);
pub const FOC0B = @as(c_int, 6);
pub const FOC0A = @as(c_int, 7);
pub const TCNT0 = _SFR_IO8(@as(c_int, 0x26));
pub const TCNT0_0 = @as(c_int, 0);
pub const TCNT0_1 = @as(c_int, 1);
pub const TCNT0_2 = @as(c_int, 2);
pub const TCNT0_3 = @as(c_int, 3);
pub const TCNT0_4 = @as(c_int, 4);
pub const TCNT0_5 = @as(c_int, 5);
pub const TCNT0_6 = @as(c_int, 6);
pub const TCNT0_7 = @as(c_int, 7);
pub const OCR0A = _SFR_IO8(@as(c_int, 0x27));
pub const OCR0A_0 = @as(c_int, 0);
pub const OCR0A_1 = @as(c_int, 1);
pub const OCR0A_2 = @as(c_int, 2);
pub const OCR0A_3 = @as(c_int, 3);
pub const OCR0A_4 = @as(c_int, 4);
pub const OCR0A_5 = @as(c_int, 5);
pub const OCR0A_6 = @as(c_int, 6);
pub const OCR0A_7 = @as(c_int, 7);
pub const OCR0B = _SFR_IO8(@as(c_int, 0x28));
pub const OCR0B_0 = @as(c_int, 0);
pub const OCR0B_1 = @as(c_int, 1);
pub const OCR0B_2 = @as(c_int, 2);
pub const OCR0B_3 = @as(c_int, 3);
pub const OCR0B_4 = @as(c_int, 4);
pub const OCR0B_5 = @as(c_int, 5);
pub const OCR0B_6 = @as(c_int, 6);
pub const OCR0B_7 = @as(c_int, 7);
pub const PLLCSR = _SFR_IO8(@as(c_int, 0x29));
pub const PLOCK = @as(c_int, 0);
pub const PLLE = @as(c_int, 1);
pub const PINDIV = @as(c_int, 4);
pub const GPIOR1 = _SFR_IO8(@as(c_int, 0x2A));
pub const GPIOR10 = @as(c_int, 0);
pub const GPIOR11 = @as(c_int, 1);
pub const GPIOR12 = @as(c_int, 2);
pub const GPIOR13 = @as(c_int, 3);
pub const GPIOR14 = @as(c_int, 4);
pub const GPIOR15 = @as(c_int, 5);
pub const GPIOR16 = @as(c_int, 6);
pub const GPIOR17 = @as(c_int, 7);
pub const GPIOR2 = _SFR_IO8(@as(c_int, 0x2B));
pub const GPIOR20 = @as(c_int, 0);
pub const GPIOR21 = @as(c_int, 1);
pub const GPIOR22 = @as(c_int, 2);
pub const GPIOR23 = @as(c_int, 3);
pub const GPIOR24 = @as(c_int, 4);
pub const GPIOR25 = @as(c_int, 5);
pub const GPIOR26 = @as(c_int, 6);
pub const GPIOR27 = @as(c_int, 7);
pub const SPCR = _SFR_IO8(@as(c_int, 0x2C));
pub const SPR0 = @as(c_int, 0);
pub const SPR1 = @as(c_int, 1);
pub const CPHA = @as(c_int, 2);
pub const CPOL = @as(c_int, 3);
pub const MSTR = @as(c_int, 4);
pub const DORD = @as(c_int, 5);
pub const SPE = @as(c_int, 6);
pub const SPIE = @as(c_int, 7);
pub const SPSR = _SFR_IO8(@as(c_int, 0x2D));
pub const SPI2X = @as(c_int, 0);
pub const WCOL = @as(c_int, 6);
pub const SPIF = @as(c_int, 7);
pub const SPDR = _SFR_IO8(@as(c_int, 0x2E));
pub const SPDR0 = @as(c_int, 0);
pub const SPDR1 = @as(c_int, 1);
pub const SPDR2 = @as(c_int, 2);
pub const SPDR3 = @as(c_int, 3);
pub const SPDR4 = @as(c_int, 4);
pub const SPDR5 = @as(c_int, 5);
pub const SPDR6 = @as(c_int, 6);
pub const SPDR7 = @as(c_int, 7);
pub const ACSR = _SFR_IO8(@as(c_int, 0x30));
pub const ACIS0 = @as(c_int, 0);
pub const ACIS1 = @as(c_int, 1);
pub const ACIC = @as(c_int, 2);
pub const ACIE = @as(c_int, 3);
pub const ACI = @as(c_int, 4);
pub const ACO = @as(c_int, 5);
pub const ACBG = @as(c_int, 6);
pub const ACD = @as(c_int, 7);
pub const OCDR = _SFR_IO8(@as(c_int, 0x31));
pub const OCDR0 = @as(c_int, 0);
pub const OCDR1 = @as(c_int, 1);
pub const OCDR2 = @as(c_int, 2);
pub const OCDR3 = @as(c_int, 3);
pub const OCDR4 = @as(c_int, 4);
pub const OCDR5 = @as(c_int, 5);
pub const OCDR6 = @as(c_int, 6);
pub const OCDR7 = @as(c_int, 7);
pub const PLLFRQ = _SFR_IO8(@as(c_int, 0x32));
pub const PDIV0 = @as(c_int, 0);
pub const PDIV1 = @as(c_int, 1);
pub const PDIV2 = @as(c_int, 2);
pub const PDIV3 = @as(c_int, 3);
pub const PLLTM0 = @as(c_int, 4);
pub const PLLTM1 = @as(c_int, 5);
pub const PLLUSB = @as(c_int, 6);
pub const PINMUX = @as(c_int, 7);
pub const SMCR = _SFR_IO8(@as(c_int, 0x33));
pub const SE = @as(c_int, 0);
pub const SM0 = @as(c_int, 1);
pub const SM1 = @as(c_int, 2);
pub const SM2 = @as(c_int, 3);
pub const MCUSR = _SFR_IO8(@as(c_int, 0x34));
pub const PORF = @as(c_int, 0);
pub const EXTRF = @as(c_int, 1);
pub const BORF = @as(c_int, 2);
pub const WDRF = @as(c_int, 3);
pub const JTRF = @as(c_int, 4);
pub const MCUCR = _SFR_IO8(@as(c_int, 0x35));
pub const IVCE = @as(c_int, 0);
pub const IVSEL = @as(c_int, 1);
pub const PUD = @as(c_int, 4);
pub const JTD = @as(c_int, 7);
pub const SPMCSR = _SFR_IO8(@as(c_int, 0x37));
pub const SPMEN = @as(c_int, 0);
pub const PGERS = @as(c_int, 1);
pub const PGWRT = @as(c_int, 2);
pub const BLBSET = @as(c_int, 3);
pub const RWWSRE = @as(c_int, 4);
pub const SIGRD = @as(c_int, 5);
pub const RWWSB = @as(c_int, 6);
pub const SPMIE = @as(c_int, 7);
pub const RAMPZ = _SFR_IO8(@as(c_int, 0x3B));
pub const RAMPZ0 = @as(c_int, 0);
pub const EIND = _SFR_IO8(@as(c_int, 0x3C));
pub const EIND0 = @as(c_int, 0);
pub const WDTCSR = _SFR_MEM8(@as(c_int, 0x60));
pub const WDP0 = @as(c_int, 0);
pub const WDP1 = @as(c_int, 1);
pub const WDP2 = @as(c_int, 2);
pub const WDE = @as(c_int, 3);
pub const WDCE = @as(c_int, 4);
pub const WDP3 = @as(c_int, 5);
pub const WDIE = @as(c_int, 6);
pub const WDIF = @as(c_int, 7);
pub const CLKPR = _SFR_MEM8(@as(c_int, 0x61));
pub const CLKPS0 = @as(c_int, 0);
pub const CLKPS1 = @as(c_int, 1);
pub const CLKPS2 = @as(c_int, 2);
pub const CLKPS3 = @as(c_int, 3);
pub const CLKPCE = @as(c_int, 7);
pub const PRR0 = _SFR_MEM8(@as(c_int, 0x64));
pub const PRADC = @as(c_int, 0);
pub const PRUSART0 = @as(c_int, 1);
pub const PRSPI = @as(c_int, 2);
pub const PRTIM1 = @as(c_int, 3);
pub const PRTIM0 = @as(c_int, 5);
pub const PRTIM2 = @as(c_int, 6);
pub const PRTWI = @as(c_int, 7);
pub const __AVR_HAVE_PRR0 = ((((((@as(c_int, 1) << PRADC) | (@as(c_int, 1) << PRUSART0)) | (@as(c_int, 1) << PRSPI)) | (@as(c_int, 1) << PRTIM1)) | (@as(c_int, 1) << PRTIM0)) | (@as(c_int, 1) << PRTIM2)) | (@as(c_int, 1) << PRTWI);
pub const __AVR_HAVE_PRR0_PRADC = "";
pub const __AVR_HAVE_PRR0_PRUSART0 = "";
pub const __AVR_HAVE_PRR0_PRSPI = "";
pub const __AVR_HAVE_PRR0_PRTIM1 = "";
pub const __AVR_HAVE_PRR0_PRTIM0 = "";
pub const __AVR_HAVE_PRR0_PRTIM2 = "";
pub const __AVR_HAVE_PRR0_PRTWI = "";
pub const PRR1 = _SFR_MEM8(@as(c_int, 0x65));
pub const PRUSART1 = @as(c_int, 0);
pub const PRTIM3 = @as(c_int, 3);
pub const PRTIM4 = @as(c_int, 4);
pub const PRUSB = @as(c_int, 7);
pub const __AVR_HAVE_PRR1 = (((@as(c_int, 1) << PRUSART1) | (@as(c_int, 1) << PRTIM4)) | (@as(c_int, 1) << PRTIM3)) | (@as(c_int, 1) << PRUSB);
pub const __AVR_HAVE_PRR1_PRUSART1 = "";
pub const __AVR_HAVE_PRR1_PRTIM3 = "";
pub const __AVR_HAVE_PRR1_PRTIM4 = "";
pub const __AVR_HAVE_PRR1_PRUSB = "";
pub const OSCCAL = _SFR_MEM8(@as(c_int, 0x66));
pub const CAL0 = @as(c_int, 0);
pub const CAL1 = @as(c_int, 1);
pub const CAL2 = @as(c_int, 2);
pub const CAL3 = @as(c_int, 3);
pub const CAL4 = @as(c_int, 4);
pub const CAL5 = @as(c_int, 5);
pub const CAL6 = @as(c_int, 6);
pub const CAL7 = @as(c_int, 7);
pub const RCCTRL = _SFR_MEM8(@as(c_int, 0x67));
pub const RCFREQ = @as(c_int, 0);
pub const PCICR = _SFR_MEM8(@as(c_int, 0x68));
pub const PCIE0 = @as(c_int, 0);
pub const EICRA = _SFR_MEM8(@as(c_int, 0x69));
pub const ISC00 = @as(c_int, 0);
pub const ISC01 = @as(c_int, 1);
pub const ISC10 = @as(c_int, 2);
pub const ISC11 = @as(c_int, 3);
pub const ISC20 = @as(c_int, 4);
pub const ISC21 = @as(c_int, 5);
pub const ISC30 = @as(c_int, 6);
pub const ISC31 = @as(c_int, 7);
pub const EICRB = _SFR_MEM8(@as(c_int, 0x6A));
pub const ISC40 = @as(c_int, 0);
pub const ISC41 = @as(c_int, 1);
pub const ISC50 = @as(c_int, 2);
pub const ISC51 = @as(c_int, 3);
pub const ISC60 = @as(c_int, 4);
pub const ISC61 = @as(c_int, 5);
pub const ISC70 = @as(c_int, 6);
pub const ISC71 = @as(c_int, 7);
pub const PCMSK0 = _SFR_MEM8(@as(c_int, 0x6B));
pub const PCINT0 = @as(c_int, 0);
pub const PCINT1 = @as(c_int, 1);
pub const PCINT2 = @as(c_int, 2);
pub const PCINT3 = @as(c_int, 3);
pub const PCINT4 = @as(c_int, 4);
pub const PCINT5 = @as(c_int, 5);
pub const PCINT6 = @as(c_int, 6);
pub const PCINT7 = @as(c_int, 7);
pub const TIMSK0 = _SFR_MEM8(@as(c_int, 0x6E));
pub const TOIE0 = @as(c_int, 0);
pub const OCIE0A = @as(c_int, 1);
pub const OCIE0B = @as(c_int, 2);
pub const TIMSK1 = _SFR_MEM8(@as(c_int, 0x6F));
pub const TOIE1 = @as(c_int, 0);
pub const OCIE1A = @as(c_int, 1);
pub const OCIE1B = @as(c_int, 2);
pub const OCIE1C = @as(c_int, 3);
pub const ICIE1 = @as(c_int, 5);
pub const TIMSK3 = _SFR_MEM8(@as(c_int, 0x71));
pub const TOIE3 = @as(c_int, 0);
pub const OCIE3A = @as(c_int, 1);
pub const OCIE3B = @as(c_int, 2);
pub const OCIE3C = @as(c_int, 3);
pub const ICIE3 = @as(c_int, 5);
pub const TIMSK4 = _SFR_MEM8(@as(c_int, 0x72));
pub const TOIE4 = @as(c_int, 2);
pub const OCIE4B = @as(c_int, 5);
pub const OCIE4A = @as(c_int, 6);
pub const OCIE4D = @as(c_int, 7);
pub const ADC = _SFR_MEM16(@as(c_int, 0x78));
pub const ADCW = _SFR_MEM16(@as(c_int, 0x78));
pub const ADCL = _SFR_MEM8(@as(c_int, 0x78));
pub const ADCL0 = @as(c_int, 0);
pub const ADCL1 = @as(c_int, 1);
pub const ADCL2 = @as(c_int, 2);
pub const ADCL3 = @as(c_int, 3);
pub const ADCL4 = @as(c_int, 4);
pub const ADCL5 = @as(c_int, 5);
pub const ADCL6 = @as(c_int, 6);
pub const ADCL7 = @as(c_int, 7);
pub const ADCH = _SFR_MEM8(@as(c_int, 0x79));
pub const ADCH0 = @as(c_int, 0);
pub const ADCH1 = @as(c_int, 1);
pub const ADCH2 = @as(c_int, 2);
pub const ADCH3 = @as(c_int, 3);
pub const ADCH4 = @as(c_int, 4);
pub const ADCH5 = @as(c_int, 5);
pub const ADCH6 = @as(c_int, 6);
pub const ADCH7 = @as(c_int, 7);
pub const ADCSRA = _SFR_MEM8(@as(c_int, 0x7A));
pub const ADPS0 = @as(c_int, 0);
pub const ADPS1 = @as(c_int, 1);
pub const ADPS2 = @as(c_int, 2);
pub const ADIE = @as(c_int, 3);
pub const ADIF = @as(c_int, 4);
pub const ADATE = @as(c_int, 5);
pub const ADSC = @as(c_int, 6);
pub const ADEN = @as(c_int, 7);
pub const ADCSRB = _SFR_MEM8(@as(c_int, 0x7B));
pub const ADTS0 = @as(c_int, 0);
pub const ADTS1 = @as(c_int, 1);
pub const ADTS2 = @as(c_int, 2);
pub const ADTS3 = @as(c_int, 3);
pub const MUX5 = @as(c_int, 5);
pub const ACME = @as(c_int, 6);
pub const ADHSM = @as(c_int, 7);
pub const ADMUX = _SFR_MEM8(@as(c_int, 0x7C));
pub const MUX0 = @as(c_int, 0);
pub const MUX1 = @as(c_int, 1);
pub const MUX2 = @as(c_int, 2);
pub const MUX3 = @as(c_int, 3);
pub const MUX4 = @as(c_int, 4);
pub const ADLAR = @as(c_int, 5);
pub const REFS0 = @as(c_int, 6);
pub const REFS1 = @as(c_int, 7);
pub const DIDR2 = _SFR_MEM8(@as(c_int, 0x7D));
pub const ADC8D = @as(c_int, 0);
pub const ADC9D = @as(c_int, 1);
pub const ADC10D = @as(c_int, 2);
pub const ADC11D = @as(c_int, 3);
pub const ADC12D = @as(c_int, 4);
pub const ADC13D = @as(c_int, 5);
pub const DIDR0 = _SFR_MEM8(@as(c_int, 0x7E));
pub const ADC0D = @as(c_int, 0);
pub const ADC1D = @as(c_int, 1);
pub const ADC2D = @as(c_int, 2);
pub const ADC3D = @as(c_int, 3);
pub const ADC4D = @as(c_int, 4);
pub const ADC5D = @as(c_int, 5);
pub const ADC6D = @as(c_int, 6);
pub const ADC7D = @as(c_int, 7);
pub const DIDR1 = _SFR_MEM8(@as(c_int, 0x7F));
pub const AIN0D = @as(c_int, 0);
pub const AIN1D = @as(c_int, 1);
pub const TCCR1A = _SFR_MEM8(@as(c_int, 0x80));
pub const WGM10 = @as(c_int, 0);
pub const WGM11 = @as(c_int, 1);
pub const COM1C0 = @as(c_int, 2);
pub const COM1C1 = @as(c_int, 3);
pub const COM1B0 = @as(c_int, 4);
pub const COM1B1 = @as(c_int, 5);
pub const COM1A0 = @as(c_int, 6);
pub const COM1A1 = @as(c_int, 7);
pub const TCCR1B = _SFR_MEM8(@as(c_int, 0x81));
pub const CS10 = @as(c_int, 0);
pub const CS11 = @as(c_int, 1);
pub const CS12 = @as(c_int, 2);
pub const WGM12 = @as(c_int, 3);
pub const WGM13 = @as(c_int, 4);
pub const ICES1 = @as(c_int, 6);
pub const ICNC1 = @as(c_int, 7);
pub const TCCR1C = _SFR_MEM8(@as(c_int, 0x82));
pub const FOC1C = @as(c_int, 5);
pub const FOC1B = @as(c_int, 6);
pub const FOC1A = @as(c_int, 7);
pub const TCNT1 = _SFR_MEM16(@as(c_int, 0x84));
pub const TCNT1L = _SFR_MEM8(@as(c_int, 0x84));
pub const TCNT1L0 = @as(c_int, 0);
pub const TCNT1L1 = @as(c_int, 1);
pub const TCNT1L2 = @as(c_int, 2);
pub const TCNT1L3 = @as(c_int, 3);
pub const TCNT1L4 = @as(c_int, 4);
pub const TCNT1L5 = @as(c_int, 5);
pub const TCNT1L6 = @as(c_int, 6);
pub const TCNT1L7 = @as(c_int, 7);
pub const TCNT1H = _SFR_MEM8(@as(c_int, 0x85));
pub const TCNT1H0 = @as(c_int, 0);
pub const TCNT1H1 = @as(c_int, 1);
pub const TCNT1H2 = @as(c_int, 2);
pub const TCNT1H3 = @as(c_int, 3);
pub const TCNT1H4 = @as(c_int, 4);
pub const TCNT1H5 = @as(c_int, 5);
pub const TCNT1H6 = @as(c_int, 6);
pub const TCNT1H7 = @as(c_int, 7);
pub const ICR1 = _SFR_MEM16(@as(c_int, 0x86));
pub const ICR1L = _SFR_MEM8(@as(c_int, 0x86));
pub const ICR1L0 = @as(c_int, 0);
pub const ICR1L1 = @as(c_int, 1);
pub const ICR1L2 = @as(c_int, 2);
pub const ICR1L3 = @as(c_int, 3);
pub const ICR1L4 = @as(c_int, 4);
pub const ICR1L5 = @as(c_int, 5);
pub const ICR1L6 = @as(c_int, 6);
pub const ICR1L7 = @as(c_int, 7);
pub const ICR1H = _SFR_MEM8(@as(c_int, 0x87));
pub const ICR1H0 = @as(c_int, 0);
pub const ICR1H1 = @as(c_int, 1);
pub const ICR1H2 = @as(c_int, 2);
pub const ICR1H3 = @as(c_int, 3);
pub const ICR1H4 = @as(c_int, 4);
pub const ICR1H5 = @as(c_int, 5);
pub const ICR1H6 = @as(c_int, 6);
pub const ICR1H7 = @as(c_int, 7);
pub const OCR1A = _SFR_MEM16(@as(c_int, 0x88));
pub const OCR1AL = _SFR_MEM8(@as(c_int, 0x88));
pub const OCR1AL0 = @as(c_int, 0);
pub const OCR1AL1 = @as(c_int, 1);
pub const OCR1AL2 = @as(c_int, 2);
pub const OCR1AL3 = @as(c_int, 3);
pub const OCR1AL4 = @as(c_int, 4);
pub const OCR1AL5 = @as(c_int, 5);
pub const OCR1AL6 = @as(c_int, 6);
pub const OCR1AL7 = @as(c_int, 7);
pub const OCR1AH = _SFR_MEM8(@as(c_int, 0x89));
pub const OCR1AH0 = @as(c_int, 0);
pub const OCR1AH1 = @as(c_int, 1);
pub const OCR1AH2 = @as(c_int, 2);
pub const OCR1AH3 = @as(c_int, 3);
pub const OCR1AH4 = @as(c_int, 4);
pub const OCR1AH5 = @as(c_int, 5);
pub const OCR1AH6 = @as(c_int, 6);
pub const OCR1AH7 = @as(c_int, 7);
pub const OCR1B = _SFR_MEM16(@as(c_int, 0x8A));
pub const OCR1BL = _SFR_MEM8(@as(c_int, 0x8A));
pub const OCR1BL0 = @as(c_int, 0);
pub const OCR1BL1 = @as(c_int, 1);
pub const OCR1BL2 = @as(c_int, 2);
pub const OCR1BL3 = @as(c_int, 3);
pub const OCR1BL4 = @as(c_int, 4);
pub const OCR1BL5 = @as(c_int, 5);
pub const OCR1BL6 = @as(c_int, 6);
pub const OCR1BL7 = @as(c_int, 7);
pub const OCR1BH = _SFR_MEM8(@as(c_int, 0x8B));
pub const OCR1BH0 = @as(c_int, 0);
pub const OCR1BH1 = @as(c_int, 1);
pub const OCR1BH2 = @as(c_int, 2);
pub const OCR1BH3 = @as(c_int, 3);
pub const OCR1BH4 = @as(c_int, 4);
pub const OCR1BH5 = @as(c_int, 5);
pub const OCR1BH6 = @as(c_int, 6);
pub const OCR1BH7 = @as(c_int, 7);
pub const OCR1C = _SFR_MEM16(@as(c_int, 0x8C));
pub const OCR1CL = _SFR_MEM8(@as(c_int, 0x8C));
pub const OCR1CL0 = @as(c_int, 0);
pub const OCR1CL1 = @as(c_int, 1);
pub const OCR1CL2 = @as(c_int, 2);
pub const OCR1CL3 = @as(c_int, 3);
pub const OCR1CL4 = @as(c_int, 4);
pub const OCR1CL5 = @as(c_int, 5);
pub const OCR1CL6 = @as(c_int, 6);
pub const OCR1CL7 = @as(c_int, 7);
pub const OCR1CH = _SFR_MEM8(@as(c_int, 0x8D));
pub const OCR1CH0 = @as(c_int, 0);
pub const OCR1CH1 = @as(c_int, 1);
pub const OCR1CH2 = @as(c_int, 2);
pub const OCR1CH3 = @as(c_int, 3);
pub const OCR1CH4 = @as(c_int, 4);
pub const OCR1CH5 = @as(c_int, 5);
pub const OCR1CH6 = @as(c_int, 6);
pub const OCR1CH7 = @as(c_int, 7);
pub const TCCR3A = _SFR_MEM8(@as(c_int, 0x90));
pub const WGM30 = @as(c_int, 0);
pub const WGM31 = @as(c_int, 1);
pub const COM3C0 = @as(c_int, 2);
pub const COM3C1 = @as(c_int, 3);
pub const COM3B0 = @as(c_int, 4);
pub const COM3B1 = @as(c_int, 5);
pub const COM3A0 = @as(c_int, 6);
pub const COM3A1 = @as(c_int, 7);
pub const TCCR3B = _SFR_MEM8(@as(c_int, 0x91));
pub const CS30 = @as(c_int, 0);
pub const CS31 = @as(c_int, 1);
pub const CS32 = @as(c_int, 2);
pub const WGM32 = @as(c_int, 3);
pub const WGM33 = @as(c_int, 4);
pub const ICES3 = @as(c_int, 6);
pub const ICNC3 = @as(c_int, 7);
pub const TCCR3C = _SFR_MEM8(@as(c_int, 0x92));
pub const FOC3C = @as(c_int, 5);
pub const FOC3B = @as(c_int, 6);
pub const FOC3A = @as(c_int, 7);
pub const TCNT3 = _SFR_MEM16(@as(c_int, 0x94));
pub const TCNT3L = _SFR_MEM8(@as(c_int, 0x94));
pub const TCNT3L0 = @as(c_int, 0);
pub const TCNT3L1 = @as(c_int, 1);
pub const TCNT3L2 = @as(c_int, 2);
pub const TCNT3L3 = @as(c_int, 3);
pub const TCNT3L4 = @as(c_int, 4);
pub const TCNT3L5 = @as(c_int, 5);
pub const TCNT3L6 = @as(c_int, 6);
pub const TCNT3L7 = @as(c_int, 7);
pub const TCNT3H = _SFR_MEM8(@as(c_int, 0x95));
pub const TCNT3H0 = @as(c_int, 0);
pub const TCNT3H1 = @as(c_int, 1);
pub const TCNT3H2 = @as(c_int, 2);
pub const TCNT3H3 = @as(c_int, 3);
pub const TCNT3H4 = @as(c_int, 4);
pub const TCNT3H5 = @as(c_int, 5);
pub const TCNT3H6 = @as(c_int, 6);
pub const TCNT3H7 = @as(c_int, 7);
pub const ICR3 = _SFR_MEM16(@as(c_int, 0x96));
pub const ICR3L = _SFR_MEM8(@as(c_int, 0x96));
pub const ICR3L0 = @as(c_int, 0);
pub const ICR3L1 = @as(c_int, 1);
pub const ICR3L2 = @as(c_int, 2);
pub const ICR3L3 = @as(c_int, 3);
pub const ICR3L4 = @as(c_int, 4);
pub const ICR3L5 = @as(c_int, 5);
pub const ICR3L6 = @as(c_int, 6);
pub const ICR3L7 = @as(c_int, 7);
pub const ICR3H = _SFR_MEM8(@as(c_int, 0x97));
pub const ICR3H0 = @as(c_int, 0);
pub const ICR3H1 = @as(c_int, 1);
pub const ICR3H2 = @as(c_int, 2);
pub const ICR3H3 = @as(c_int, 3);
pub const ICR3H4 = @as(c_int, 4);
pub const ICR3H5 = @as(c_int, 5);
pub const ICR3H6 = @as(c_int, 6);
pub const ICR3H7 = @as(c_int, 7);
pub const OCR3A = _SFR_MEM16(@as(c_int, 0x98));
pub const OCR3AL = _SFR_MEM8(@as(c_int, 0x98));
pub const OCR3AL0 = @as(c_int, 0);
pub const OCR3AL1 = @as(c_int, 1);
pub const OCR3AL2 = @as(c_int, 2);
pub const OCR3AL3 = @as(c_int, 3);
pub const OCR3AL4 = @as(c_int, 4);
pub const OCR3AL5 = @as(c_int, 5);
pub const OCR3AL6 = @as(c_int, 6);
pub const OCR3AL7 = @as(c_int, 7);
pub const OCR3AH = _SFR_MEM8(@as(c_int, 0x99));
pub const OCR3AH0 = @as(c_int, 0);
pub const OCR3AH1 = @as(c_int, 1);
pub const OCR3AH2 = @as(c_int, 2);
pub const OCR3AH3 = @as(c_int, 3);
pub const OCR3AH4 = @as(c_int, 4);
pub const OCR3AH5 = @as(c_int, 5);
pub const OCR3AH6 = @as(c_int, 6);
pub const OCR3AH7 = @as(c_int, 7);
pub const OCR3B = _SFR_MEM16(@as(c_int, 0x9A));
pub const OCR3BL = _SFR_MEM8(@as(c_int, 0x9A));
pub const OCR3BL0 = @as(c_int, 0);
pub const OCR3BL1 = @as(c_int, 1);
pub const OCR3BL2 = @as(c_int, 2);
pub const OCR3BL3 = @as(c_int, 3);
pub const OCR3BL4 = @as(c_int, 4);
pub const OCR3BL5 = @as(c_int, 5);
pub const OCR3BL6 = @as(c_int, 6);
pub const OCR3BL7 = @as(c_int, 7);
pub const OCR3BH = _SFR_MEM8(@as(c_int, 0x9B));
pub const OCR3BH0 = @as(c_int, 0);
pub const OCR3BH1 = @as(c_int, 1);
pub const OCR3BH2 = @as(c_int, 2);
pub const OCR3BH3 = @as(c_int, 3);
pub const OCR3BH4 = @as(c_int, 4);
pub const OCR3BH5 = @as(c_int, 5);
pub const OCR3BH6 = @as(c_int, 6);
pub const OCR3BH7 = @as(c_int, 7);
pub const OCR3C = _SFR_MEM16(@as(c_int, 0x9C));
pub const OCR3CL = _SFR_MEM8(@as(c_int, 0x9C));
pub const OCR3CL0 = @as(c_int, 0);
pub const OCR3CL1 = @as(c_int, 1);
pub const OCR3CL2 = @as(c_int, 2);
pub const OCR3CL3 = @as(c_int, 3);
pub const OCR3CL4 = @as(c_int, 4);
pub const OCR3CL5 = @as(c_int, 5);
pub const OCR3CL6 = @as(c_int, 6);
pub const OCR3CL7 = @as(c_int, 7);
pub const OCR3CH = _SFR_MEM8(@as(c_int, 0x9D));
pub const OCR3CH0 = @as(c_int, 0);
pub const OCR3CH1 = @as(c_int, 1);
pub const OCR3CH2 = @as(c_int, 2);
pub const OCR3CH3 = @as(c_int, 3);
pub const OCR3CH4 = @as(c_int, 4);
pub const OCR3CH5 = @as(c_int, 5);
pub const OCR3CH6 = @as(c_int, 6);
pub const OCR3CH7 = @as(c_int, 7);
pub const TWBR = _SFR_MEM8(@as(c_int, 0xB8));
pub const TWBR0 = @as(c_int, 0);
pub const TWBR1 = @as(c_int, 1);
pub const TWBR2 = @as(c_int, 2);
pub const TWBR3 = @as(c_int, 3);
pub const TWBR4 = @as(c_int, 4);
pub const TWBR5 = @as(c_int, 5);
pub const TWBR6 = @as(c_int, 6);
pub const TWBR7 = @as(c_int, 7);
pub const TWSR = _SFR_MEM8(@as(c_int, 0xB9));
pub const TWPS0 = @as(c_int, 0);
pub const TWPS1 = @as(c_int, 1);
pub const TWS3 = @as(c_int, 3);
pub const TWS4 = @as(c_int, 4);
pub const TWS5 = @as(c_int, 5);
pub const TWS6 = @as(c_int, 6);
pub const TWS7 = @as(c_int, 7);
pub const TWAR = _SFR_MEM8(@as(c_int, 0xBA));
pub const TWGCE = @as(c_int, 0);
pub const TWA0 = @as(c_int, 1);
pub const TWA1 = @as(c_int, 2);
pub const TWA2 = @as(c_int, 3);
pub const TWA3 = @as(c_int, 4);
pub const TWA4 = @as(c_int, 5);
pub const TWA5 = @as(c_int, 6);
pub const TWA6 = @as(c_int, 7);
pub const TWDR = _SFR_MEM8(@as(c_int, 0xBB));
pub const TWD0 = @as(c_int, 0);
pub const TWD1 = @as(c_int, 1);
pub const TWD2 = @as(c_int, 2);
pub const TWD3 = @as(c_int, 3);
pub const TWD4 = @as(c_int, 4);
pub const TWD5 = @as(c_int, 5);
pub const TWD6 = @as(c_int, 6);
pub const TWD7 = @as(c_int, 7);
pub const TWCR = _SFR_MEM8(@as(c_int, 0xBC));
pub const TWIE = @as(c_int, 0);
pub const TWEN = @as(c_int, 2);
pub const TWWC = @as(c_int, 3);
pub const TWSTO = @as(c_int, 4);
pub const TWSTA = @as(c_int, 5);
pub const TWEA = @as(c_int, 6);
pub const TWINT = @as(c_int, 7);
pub const TWAMR = _SFR_MEM8(@as(c_int, 0xBD));
pub const TWAM0 = @as(c_int, 1);
pub const TWAM1 = @as(c_int, 2);
pub const TWAM2 = @as(c_int, 3);
pub const TWAM3 = @as(c_int, 4);
pub const TWAM4 = @as(c_int, 5);
pub const TWAM5 = @as(c_int, 6);
pub const TWAM6 = @as(c_int, 7);
pub const TCNT4 = _SFR_MEM16(@as(c_int, 0xBE));
pub const TCNT4L = _SFR_MEM8(@as(c_int, 0xBE));
pub const TC40 = @as(c_int, 0);
pub const TC41 = @as(c_int, 1);
pub const TC42 = @as(c_int, 2);
pub const TC43 = @as(c_int, 3);
pub const TC44 = @as(c_int, 4);
pub const TC45 = @as(c_int, 5);
pub const TC46 = @as(c_int, 6);
pub const TC47 = @as(c_int, 7);
pub const TCNT4H = _SFR_MEM8(@as(c_int, 0xBF));
pub const TC4H = _SFR_MEM8(@as(c_int, 0xBF));
pub const TC48 = @as(c_int, 0);
pub const TC49 = @as(c_int, 1);
pub const TC410 = @as(c_int, 2);
pub const TCCR4A = _SFR_MEM8(@as(c_int, 0xC0));
pub const PWM4B = @as(c_int, 0);
pub const PWM4A = @as(c_int, 1);
pub const FOC4B = @as(c_int, 2);
pub const FOC4A = @as(c_int, 3);
pub const COM4B0 = @as(c_int, 4);
pub const COM4B1 = @as(c_int, 5);
pub const COM4A0 = @as(c_int, 6);
pub const COM4A1 = @as(c_int, 7);
pub const TCCR4B = _SFR_MEM8(@as(c_int, 0xC1));
pub const CS40 = @as(c_int, 0);
pub const CS41 = @as(c_int, 1);
pub const CS42 = @as(c_int, 2);
pub const CS43 = @as(c_int, 3);
pub const DTPS40 = @as(c_int, 4);
pub const DTPS41 = @as(c_int, 5);
pub const PSR4 = @as(c_int, 6);
pub const PWM4X = @as(c_int, 7);
pub const TCCR4C = _SFR_MEM8(@as(c_int, 0xC2));
pub const PWM4D = @as(c_int, 0);
pub const FOC4D = @as(c_int, 1);
pub const COM4D0 = @as(c_int, 2);
pub const COM4D1 = @as(c_int, 3);
pub const COM4B0S = @as(c_int, 4);
pub const COM4B1S = @as(c_int, 5);
pub const COM4A0S = @as(c_int, 6);
pub const COM4A1S = @as(c_int, 7);
pub const TCCR4D = _SFR_MEM8(@as(c_int, 0xC3));
pub const WGM40 = @as(c_int, 0);
pub const WGM41 = @as(c_int, 1);
pub const FPF4 = @as(c_int, 2);
pub const FPAC4 = @as(c_int, 3);
pub const FPES4 = @as(c_int, 4);
pub const FPNC4 = @as(c_int, 5);
pub const FPEN4 = @as(c_int, 6);
pub const FPIE4 = @as(c_int, 7);
pub const TCCR4E = _SFR_MEM8(@as(c_int, 0xC4));
pub const OC4OE0 = @as(c_int, 0);
pub const OC4OE1 = @as(c_int, 1);
pub const OC4OE2 = @as(c_int, 2);
pub const OC4OE3 = @as(c_int, 3);
pub const OC4OE4 = @as(c_int, 4);
pub const OC4OE5 = @as(c_int, 5);
pub const ENHC4 = @as(c_int, 6);
pub const TLOCK4 = @as(c_int, 7);
pub const CLKSEL0 = _SFR_MEM8(@as(c_int, 0xC5));
pub const CLKS = @as(c_int, 0);
pub const EXTE = @as(c_int, 2);
pub const RCE = @as(c_int, 3);
pub const EXSUT0 = @as(c_int, 4);
pub const EXSUT1 = @as(c_int, 5);
pub const RCSUT0 = @as(c_int, 6);
pub const RCSUT1 = @as(c_int, 7);
pub const CLKSEL1 = _SFR_MEM8(@as(c_int, 0xC6));
pub const EXCKSEL0 = @as(c_int, 0);
pub const EXCKSEL1 = @as(c_int, 1);
pub const EXCKSEL2 = @as(c_int, 2);
pub const EXCKSEL3 = @as(c_int, 3);
pub const RCCKSEL0 = @as(c_int, 4);
pub const RCCKSEL1 = @as(c_int, 5);
pub const RCCKSEL2 = @as(c_int, 6);
pub const RCCKSEL3 = @as(c_int, 7);
pub const CLKSTA = _SFR_MEM8(@as(c_int, 0xC7));
pub const EXTON = @as(c_int, 0);
pub const RCON = @as(c_int, 1);
pub const UCSR1A = _SFR_MEM8(@as(c_int, 0xC8));
pub const MPCM1 = @as(c_int, 0);
pub const U2X1 = @as(c_int, 1);
pub const UPE1 = @as(c_int, 2);
pub const DOR1 = @as(c_int, 3);
pub const FE1 = @as(c_int, 4);
pub const UDRE1 = @as(c_int, 5);
pub const TXC1 = @as(c_int, 6);
pub const RXC1 = @as(c_int, 7);
pub const UCSR1B = _SFR_MEM8(@as(c_int, 0xC9));
pub const TXB81 = @as(c_int, 0);
pub const RXB81 = @as(c_int, 1);
pub const UCSZ12 = @as(c_int, 2);
pub const TXEN1 = @as(c_int, 3);
pub const RXEN1 = @as(c_int, 4);
pub const UDRIE1 = @as(c_int, 5);
pub const TXCIE1 = @as(c_int, 6);
pub const RXCIE1 = @as(c_int, 7);
pub const UCSR1C = _SFR_MEM8(@as(c_int, 0xCA));
pub const UCPOL1 = @as(c_int, 0);
pub const UCSZ10 = @as(c_int, 1);
pub const UCSZ11 = @as(c_int, 2);
pub const USBS1 = @as(c_int, 3);
pub const UPM10 = @as(c_int, 4);
pub const UPM11 = @as(c_int, 5);
pub const UMSEL10 = @as(c_int, 6);
pub const UMSEL11 = @as(c_int, 7);
pub const UCSR1D = _SFR_MEM8(@as(c_int, 0xCB));
pub const RTSEN = @as(c_int, 0);
pub const CTSEN = @as(c_int, 1);
pub const UBRR1 = _SFR_MEM16(@as(c_int, 0xCC));
pub const UBRR1L = _SFR_MEM8(@as(c_int, 0xCC));
pub const UBRR1H = _SFR_MEM8(@as(c_int, 0xCD));
pub const UDR1 = _SFR_MEM8(@as(c_int, 0xCE));
pub const UDR1_0 = @as(c_int, 0);
pub const UDR1_1 = @as(c_int, 1);
pub const UDR1_2 = @as(c_int, 2);
pub const UDR1_3 = @as(c_int, 3);
pub const UDR1_4 = @as(c_int, 4);
pub const UDR1_5 = @as(c_int, 5);
pub const UDR1_6 = @as(c_int, 6);
pub const UDR1_7 = @as(c_int, 7);
pub const OCR4A = _SFR_MEM8(@as(c_int, 0xCF));
pub const OCR4A0 = @as(c_int, 0);
pub const OCR4A1 = @as(c_int, 1);
pub const OCR4A2 = @as(c_int, 2);
pub const OCR4A3 = @as(c_int, 3);
pub const OCR4A4 = @as(c_int, 4);
pub const OCR4A5 = @as(c_int, 5);
pub const OCR4A6 = @as(c_int, 6);
pub const OCR4A7 = @as(c_int, 7);
pub const OCR4B = _SFR_MEM8(@as(c_int, 0xD0));
pub const OCR4B0 = @as(c_int, 0);
pub const OCR4B1 = @as(c_int, 1);
pub const OCR4B2 = @as(c_int, 2);
pub const OCR4B3 = @as(c_int, 3);
pub const OCR4B4 = @as(c_int, 4);
pub const OCR4B5 = @as(c_int, 5);
pub const OCR4B6 = @as(c_int, 6);
pub const OCR4B7 = @as(c_int, 7);
pub const OCR4C = _SFR_MEM8(@as(c_int, 0xD1));
pub const OCR4C0 = @as(c_int, 0);
pub const OCR4C1 = @as(c_int, 1);
pub const OCR4C2 = @as(c_int, 2);
pub const OCR4C3 = @as(c_int, 3);
pub const OCR4C4 = @as(c_int, 4);
pub const OCR4C5 = @as(c_int, 5);
pub const OCR4C6 = @as(c_int, 6);
pub const OCR4C7 = @as(c_int, 7);
pub const OCR4D = _SFR_MEM8(@as(c_int, 0xD2));
pub const OCR4D0 = @as(c_int, 0);
pub const OCR4D1 = @as(c_int, 1);
pub const OCR4D2 = @as(c_int, 2);
pub const OCR4D3 = @as(c_int, 3);
pub const OCR4D4 = @as(c_int, 4);
pub const OCR4D5 = @as(c_int, 5);
pub const OCR4D6 = @as(c_int, 6);
pub const OCR4D7 = @as(c_int, 7);
pub const DT4 = _SFR_MEM8(@as(c_int, 0xD4));
pub const DT4L0 = @as(c_int, 0);
pub const DT4L1 = @as(c_int, 1);
pub const DT4L2 = @as(c_int, 2);
pub const DT4L3 = @as(c_int, 3);
pub const DT4L4 = @as(c_int, 4);
pub const DT4L5 = @as(c_int, 5);
pub const DT4L6 = @as(c_int, 6);
pub const DT4L7 = @as(c_int, 7);
pub const UHWCON = _SFR_MEM8(@as(c_int, 0xD7));
pub const UVREGE = @as(c_int, 0);
pub const USBCON = _SFR_MEM8(@as(c_int, 0xD8));
pub const VBUSTE = @as(c_int, 0);
pub const OTGPADE = @as(c_int, 4);
pub const FRZCLK = @as(c_int, 5);
pub const USBE = @as(c_int, 7);
pub const USBSTA = _SFR_MEM8(@as(c_int, 0xD9));
pub const VBUS = @as(c_int, 0);
pub const SPEED = @as(c_int, 3);
pub const USBINT = _SFR_MEM8(@as(c_int, 0xDA));
pub const VBUSTI = @as(c_int, 0);
pub const UDCON = _SFR_MEM8(@as(c_int, 0xE0));
pub const DETACH = @as(c_int, 0);
pub const RMWKUP = @as(c_int, 1);
pub const LSM = @as(c_int, 2);
pub const RSTCPU = @as(c_int, 3);
pub const UDINT = _SFR_MEM8(@as(c_int, 0xE1));
pub const SUSPI = @as(c_int, 0);
pub const SOFI = @as(c_int, 2);
pub const EORSTI = @as(c_int, 3);
pub const WAKEUPI = @as(c_int, 4);
pub const EORSMI = @as(c_int, 5);
pub const UPRSMI = @as(c_int, 6);
pub const UDIEN = _SFR_MEM8(@as(c_int, 0xE2));
pub const SUSPE = @as(c_int, 0);
pub const SOFE = @as(c_int, 2);
pub const EORSTE = @as(c_int, 3);
pub const WAKEUPE = @as(c_int, 4);
pub const EORSME = @as(c_int, 5);
pub const UPRSME = @as(c_int, 6);
pub const UDADDR = _SFR_MEM8(@as(c_int, 0xE3));
pub const UADD0 = @as(c_int, 0);
pub const UADD1 = @as(c_int, 1);
pub const UADD2 = @as(c_int, 2);
pub const UADD3 = @as(c_int, 3);
pub const UADD4 = @as(c_int, 4);
pub const UADD5 = @as(c_int, 5);
pub const UADD6 = @as(c_int, 6);
pub const ADDEN = @as(c_int, 7);
pub const UDFNUM = _SFR_MEM16(@as(c_int, 0xE4));
pub const UDFNUML = _SFR_MEM8(@as(c_int, 0xE4));
pub const FNUM0 = @as(c_int, 0);
pub const FNUM1 = @as(c_int, 1);
pub const FNUM2 = @as(c_int, 2);
pub const FNUM3 = @as(c_int, 3);
pub const FNUM4 = @as(c_int, 4);
pub const FNUM5 = @as(c_int, 5);
pub const FNUM6 = @as(c_int, 6);
pub const FNUM7 = @as(c_int, 7);
pub const UDFNUMH = _SFR_MEM8(@as(c_int, 0xE5));
pub const FNUM8 = @as(c_int, 0);
pub const FNUM9 = @as(c_int, 1);
pub const FNUM10 = @as(c_int, 2);
pub const UDMFN = _SFR_MEM8(@as(c_int, 0xE6));
pub const FNCERR = @as(c_int, 4);
pub const UEINTX = _SFR_MEM8(@as(c_int, 0xE8));
pub const TXINI = @as(c_int, 0);
pub const STALLEDI = @as(c_int, 1);
pub const RXOUTI = @as(c_int, 2);
pub const RXSTPI = @as(c_int, 3);
pub const NAKOUTI = @as(c_int, 4);
pub const RWAL = @as(c_int, 5);
pub const NAKINI = @as(c_int, 6);
pub const FIFOCON = @as(c_int, 7);
pub const UENUM = _SFR_MEM8(@as(c_int, 0xE9));
pub const UENUM_0 = @as(c_int, 0);
pub const UENUM_1 = @as(c_int, 1);
pub const UENUM_2 = @as(c_int, 2);
pub const UERST = _SFR_MEM8(@as(c_int, 0xEA));
pub const EPRST0 = @as(c_int, 0);
pub const EPRST1 = @as(c_int, 1);
pub const EPRST2 = @as(c_int, 2);
pub const EPRST3 = @as(c_int, 3);
pub const EPRST4 = @as(c_int, 4);
pub const EPRST5 = @as(c_int, 5);
pub const EPRST6 = @as(c_int, 6);
pub const UECONX = _SFR_MEM8(@as(c_int, 0xEB));
pub const EPEN = @as(c_int, 0);
pub const RSTDT = @as(c_int, 3);
pub const STALLRQC = @as(c_int, 4);
pub const STALLRQ = @as(c_int, 5);
pub const UECFG0X = _SFR_MEM8(@as(c_int, 0xEC));
pub const EPDIR = @as(c_int, 0);
pub const EPTYPE0 = @as(c_int, 6);
pub const EPTYPE1 = @as(c_int, 7);
pub const UECFG1X = _SFR_MEM8(@as(c_int, 0xED));
pub const ALLOC = @as(c_int, 1);
pub const EPBK0 = @as(c_int, 2);
pub const EPBK1 = @as(c_int, 3);
pub const EPSIZE0 = @as(c_int, 4);
pub const EPSIZE1 = @as(c_int, 5);
pub const EPSIZE2 = @as(c_int, 6);
pub const UESTA0X = _SFR_MEM8(@as(c_int, 0xEE));
pub const NBUSYBK0 = @as(c_int, 0);
pub const NBUSYBK1 = @as(c_int, 1);
pub const DTSEQ0 = @as(c_int, 2);
pub const DTSEQ1 = @as(c_int, 3);
pub const UNDERFI = @as(c_int, 5);
pub const OVERFI = @as(c_int, 6);
pub const CFGOK = @as(c_int, 7);
pub const UESTA1X = _SFR_MEM8(@as(c_int, 0xEF));
pub const CURRBK0 = @as(c_int, 0);
pub const CURRBK1 = @as(c_int, 1);
pub const CTRLDIR = @as(c_int, 2);
pub const UEIENX = _SFR_MEM8(@as(c_int, 0xF0));
pub const TXINE = @as(c_int, 0);
pub const STALLEDE = @as(c_int, 1);
pub const RXOUTE = @as(c_int, 2);
pub const RXSTPE = @as(c_int, 3);
pub const NAKOUTE = @as(c_int, 4);
pub const NAKINE = @as(c_int, 6);
pub const FLERRE = @as(c_int, 7);
pub const UEDATX = _SFR_MEM8(@as(c_int, 0xF1));
pub const DAT0 = @as(c_int, 0);
pub const DAT1 = @as(c_int, 1);
pub const DAT2 = @as(c_int, 2);
pub const DAT3 = @as(c_int, 3);
pub const DAT4 = @as(c_int, 4);
pub const DAT5 = @as(c_int, 5);
pub const DAT6 = @as(c_int, 6);
pub const DAT7 = @as(c_int, 7);
pub const UEBCX = _SFR_MEM16(@as(c_int, 0xF2));
pub const UEBCLX = _SFR_MEM8(@as(c_int, 0xF2));
pub const BYCT0 = @as(c_int, 0);
pub const BYCT1 = @as(c_int, 1);
pub const BYCT2 = @as(c_int, 2);
pub const BYCT3 = @as(c_int, 3);
pub const BYCT4 = @as(c_int, 4);
pub const BYCT5 = @as(c_int, 5);
pub const BYCT6 = @as(c_int, 6);
pub const BYCT7 = @as(c_int, 7);
pub const UEBCHX = _SFR_MEM8(@as(c_int, 0xF3));
pub const UEINT = _SFR_MEM8(@as(c_int, 0xF4));
pub const EPINT0 = @as(c_int, 0);
pub const EPINT1 = @as(c_int, 1);
pub const EPINT2 = @as(c_int, 2);
pub const EPINT3 = @as(c_int, 3);
pub const EPINT4 = @as(c_int, 4);
pub const EPINT5 = @as(c_int, 5);
pub const EPINT6 = @as(c_int, 6);
pub const INT0_vect_num = @as(c_int, 1);
pub const INT0_vect = _VECTOR(@as(c_int, 1));
pub const INT1_vect_num = @as(c_int, 2);
pub const INT1_vect = _VECTOR(@as(c_int, 2));
pub const INT2_vect_num = @as(c_int, 3);
pub const INT2_vect = _VECTOR(@as(c_int, 3));
pub const INT3_vect_num = @as(c_int, 4);
pub const INT3_vect = _VECTOR(@as(c_int, 4));
pub const INT6_vect_num = @as(c_int, 7);
pub const INT6_vect = _VECTOR(@as(c_int, 7));
pub const PCINT0_vect_num = @as(c_int, 9);
pub const PCINT0_vect = _VECTOR(@as(c_int, 9));
pub const USB_GEN_vect_num = @as(c_int, 10);
pub const USB_GEN_vect = _VECTOR(@as(c_int, 10));
pub const USB_COM_vect_num = @as(c_int, 11);
pub const USB_COM_vect = _VECTOR(@as(c_int, 11));
pub const WDT_vect_num = @as(c_int, 12);
pub const WDT_vect = _VECTOR(@as(c_int, 12));
pub const TIMER1_CAPT_vect_num = @as(c_int, 16);
pub const TIMER1_CAPT_vect = _VECTOR(@as(c_int, 16));
pub const TIMER1_COMPA_vect_num = @as(c_int, 17);
pub const TIMER1_COMPA_vect = _VECTOR(@as(c_int, 17));
pub const TIMER1_COMPB_vect_num = @as(c_int, 18);
pub const TIMER1_COMPB_vect = _VECTOR(@as(c_int, 18));
pub const TIMER1_COMPC_vect_num = @as(c_int, 19);
pub const TIMER1_COMPC_vect = _VECTOR(@as(c_int, 19));
pub const TIMER1_OVF_vect_num = @as(c_int, 20);
pub const TIMER1_OVF_vect = _VECTOR(@as(c_int, 20));
pub const TIMER0_COMPA_vect_num = @as(c_int, 21);
pub const TIMER0_COMPA_vect = _VECTOR(@as(c_int, 21));
pub const TIMER0_COMPB_vect_num = @as(c_int, 22);
pub const TIMER0_COMPB_vect = _VECTOR(@as(c_int, 22));
pub const TIMER0_OVF_vect_num = @as(c_int, 23);
pub const TIMER0_OVF_vect = _VECTOR(@as(c_int, 23));
pub const SPI_STC_vect_num = @as(c_int, 24);
pub const SPI_STC_vect = _VECTOR(@as(c_int, 24));
pub const USART1_RX_vect_num = @as(c_int, 25);
pub const USART1_RX_vect = _VECTOR(@as(c_int, 25));
pub const USART1_UDRE_vect_num = @as(c_int, 26);
pub const USART1_UDRE_vect = _VECTOR(@as(c_int, 26));
pub const USART1_TX_vect_num = @as(c_int, 27);
pub const USART1_TX_vect = _VECTOR(@as(c_int, 27));
pub const ANALOG_COMP_vect_num = @as(c_int, 28);
pub const ANALOG_COMP_vect = _VECTOR(@as(c_int, 28));
pub const ADC_vect_num = @as(c_int, 29);
pub const ADC_vect = _VECTOR(@as(c_int, 29));
pub const EE_READY_vect_num = @as(c_int, 30);
pub const EE_READY_vect = _VECTOR(@as(c_int, 30));
pub const TIMER3_CAPT_vect_num = @as(c_int, 31);
pub const TIMER3_CAPT_vect = _VECTOR(@as(c_int, 31));
pub const TIMER3_COMPA_vect_num = @as(c_int, 32);
pub const TIMER3_COMPA_vect = _VECTOR(@as(c_int, 32));
pub const TIMER3_COMPB_vect_num = @as(c_int, 33);
pub const TIMER3_COMPB_vect = _VECTOR(@as(c_int, 33));
pub const TIMER3_COMPC_vect_num = @as(c_int, 34);
pub const TIMER3_COMPC_vect = _VECTOR(@as(c_int, 34));
pub const TIMER3_OVF_vect_num = @as(c_int, 35);
pub const TIMER3_OVF_vect = _VECTOR(@as(c_int, 35));
pub const TWI_vect_num = @as(c_int, 36);
pub const TWI_vect = _VECTOR(@as(c_int, 36));
pub const SPM_READY_vect_num = @as(c_int, 37);
pub const SPM_READY_vect = _VECTOR(@as(c_int, 37));
pub const TIMER4_COMPA_vect_num = @as(c_int, 38);
pub const TIMER4_COMPA_vect = _VECTOR(@as(c_int, 38));
pub const TIMER4_COMPB_vect_num = @as(c_int, 39);
pub const TIMER4_COMPB_vect = _VECTOR(@as(c_int, 39));
pub const TIMER4_COMPD_vect_num = @as(c_int, 40);
pub const TIMER4_COMPD_vect = _VECTOR(@as(c_int, 40));
pub const TIMER4_OVF_vect_num = @as(c_int, 41);
pub const TIMER4_OVF_vect = _VECTOR(@as(c_int, 41));
pub const TIMER4_FPF_vect_num = @as(c_int, 42);
pub const TIMER4_FPF_vect = _VECTOR(@as(c_int, 42));
pub const _VECTORS_SIZE = @as(c_int, 43) * @as(c_int, 4);
pub const SPM_PAGESIZE = @as(c_int, 128);
pub const RAMSTART = @as(c_int, 0x100);
pub const RAMSIZE = @as(c_int, 0xA00);
pub const RAMEND = (RAMSTART + RAMSIZE) - @as(c_int, 1);
pub const XRAMSTART = @as(c_int, 0x2200);
pub const XRAMSIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000, .hexadecimal);
pub const XRAMEND = XRAMSIZE - @as(c_int, 1);
pub const E2END = @as(c_int, 0x3FF);
pub const E2PAGESIZE = @as(c_int, 4);
pub const FLASHEND = @as(c_int, 0x7FFF);
pub const FUSE_MEMORY_SIZE = @as(c_int, 3);
pub const FUSE_CKSEL0 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 0)));
pub const FUSE_CKSEL1 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 1)));
pub const FUSE_CKSEL2 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 2)));
pub const FUSE_CKSEL3 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 3)));
pub const FUSE_SUT0 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 4)));
pub const FUSE_SUT1 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 5)));
pub const FUSE_CKOUT = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 6)));
pub const FUSE_CKDIV8 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 7)));
pub const LFUSE_DEFAULT = (((FUSE_CKSEL1 & FUSE_CKSEL2) & FUSE_CKSEL3) & FUSE_SUT1) & FUSE_CKDIV8;
pub const FUSE_BOOTRST = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 0)));
pub const FUSE_BOOTSZ0 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 1)));
pub const FUSE_BOOTSZ1 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 2)));
pub const FUSE_EESAVE = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 3)));
pub const FUSE_WDTON = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 4)));
pub const FUSE_SPIEN = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 5)));
pub const FUSE_JTAGEN = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 6)));
pub const FUSE_OCDEN = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 7)));
pub const HFUSE_DEFAULT = FUSE_BOOTSZ0 & FUSE_SPIEN;
pub const FUSE_BODLEVEL0 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 0)));
pub const FUSE_BODLEVEL1 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 1)));
pub const FUSE_BODLEVEL2 = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 2)));
pub const FUSE_HWBE = @import("std").zig.c_translation.cast(u8, ~_BV(@as(c_int, 3)));
pub const EFUSE_DEFAULT = @as(c_int, 0xFF);
pub const __LOCK_BITS_EXIST = "";
pub const __BOOT_LOCK_BITS_0_EXIST = "";
pub const __BOOT_LOCK_BITS_1_EXIST = "";
pub const SIGNATURE_0 = @as(c_int, 0x1E);
pub const SIGNATURE_1 = @as(c_int, 0x95);
pub const SIGNATURE_2 = @as(c_int, 0x87);
pub const SLEEP_MODE_IDLE = @as(c_int, 0x00) << @as(c_int, 1);
pub const SLEEP_MODE_ADC = @as(c_int, 0x01) << @as(c_int, 1);
pub const SLEEP_MODE_PWR_DOWN = @as(c_int, 0x02) << @as(c_int, 1);
pub const SLEEP_MODE_PWR_SAVE = @as(c_int, 0x03) << @as(c_int, 1);
pub const SLEEP_MODE_STANDBY = @as(c_int, 0x06) << @as(c_int, 1);
pub const SLEEP_MODE_EXT_STANDBY = @as(c_int, 0x07) << @as(c_int, 1);
pub const _AVR_PORTPINS_H_ = @as(c_int, 1);
pub const PORT7 = @as(c_int, 7);
pub const PORT6 = @as(c_int, 6);
pub const PORT5 = @as(c_int, 5);
pub const PORT4 = @as(c_int, 4);
pub const PORT3 = @as(c_int, 3);
pub const PORT2 = @as(c_int, 2);
pub const PORT1 = @as(c_int, 1);
pub const PORT0 = @as(c_int, 0);
pub const DD7 = @as(c_int, 7);
pub const DD6 = @as(c_int, 6);
pub const DD5 = @as(c_int, 5);
pub const DD4 = @as(c_int, 4);
pub const DD3 = @as(c_int, 3);
pub const DD2 = @as(c_int, 2);
pub const DD1 = @as(c_int, 1);
pub const DD0 = @as(c_int, 0);
pub const PIN7 = @as(c_int, 7);
pub const PIN6 = @as(c_int, 6);
pub const PIN5 = @as(c_int, 5);
pub const PIN4 = @as(c_int, 4);
pub const PIN3 = @as(c_int, 3);
pub const PIN2 = @as(c_int, 2);
pub const PIN1 = @as(c_int, 1);
pub const PIN0 = @as(c_int, 0);
pub const PB0 = PORTB0;
pub const PB1 = PORTB1;
pub const PB2 = PORTB2;
pub const PB3 = PORTB3;
pub const PB4 = PORTB4;
pub const PB5 = PORTB5;
pub const PB6 = PORTB6;
pub const PB7 = PORTB7;
pub const PC6 = PORTC6;
pub const PC7 = PORTC7;
pub const PD0 = PORTD0;
pub const PD1 = PORTD1;
pub const PD2 = PORTD2;
pub const PD3 = PORTD3;
pub const PD4 = PORTD4;
pub const PD5 = PORTD5;
pub const PD6 = PORTD6;
pub const PD7 = PORTD7;
pub const PE2 = PORTE2;
pub const PE6 = PORTE6;
pub const PF0 = PORTF0;
pub const PF1 = PORTF1;
pub const PF4 = PORTF4;
pub const PF5 = PORTF5;
pub const PF6 = PORTF6;
pub const PF7 = PORTF7;
pub const _AVR_COMMON_H = "";
pub const SPL = _SFR_IO8(@as(c_int, 0x3D));
pub const SP = _SFR_IO16(@as(c_int, 0x3D));
pub const SPH = _SFR_IO8(@as(c_int, 0x3E));
pub const SREG = _SFR_IO8(@as(c_int, 0x3F));
pub const SREG_C = @as(c_int, 0);
pub const SREG_Z = @as(c_int, 1);
pub const SREG_N = @as(c_int, 2);
pub const SREG_V = @as(c_int, 3);
pub const SREG_S = @as(c_int, 4);
pub const SREG_H = @as(c_int, 5);
pub const SREG_T = @as(c_int, 6);
pub const SREG_I = @as(c_int, 7);
pub const AVR_STATUS_REG = SREG;
pub const AVR_STATUS_ADDR = _SFR_IO_ADDR(SREG);
pub const AVR_STACK_POINTER_REG = SP;
pub const AVR_STACK_POINTER_ADDR = _SFR_IO_ADDR(SP);
pub const _HAVE_AVR_STACK_POINTER_HI = @as(c_int, 1);
pub const AVR_STACK_POINTER_HI_REG = SPH;
pub const AVR_STACK_POINTER_HI_ADDR = _SFR_IO_ADDR(SPH);
pub const AVR_STACK_POINTER_LO_REG = SPL;
pub const AVR_STACK_POINTER_LO_ADDR = _SFR_IO_ADDR(SPL);
pub const AVR_RAMPZ_REG = RAMPZ;
pub const AVR_RAMPZ_ADDR = _SFR_IO_ADDR(RAMPZ);
pub const AVR_EXTENDED_INDIRECT_REG = EIND;
pub const AVR_EXTENDED_INDIRECT_ADDR = _SFR_IO_ADDR(EIND);
pub const _AVR_VERSION_H_ = "";
pub const __AVR_LIBC_VERSION_STRING__ = "2.1.0";
pub const __AVR_LIBC_VERSION__ = @as(c_ulong, 20100);
pub const __AVR_LIBC_DATE_STRING__ = "20220128";
pub const __AVR_LIBC_DATE_ = @as(c_ulong, 20220128);
pub const __AVR_LIBC_MAJOR__ = @as(c_int, 2);
pub const __AVR_LIBC_MINOR__ = @as(c_int, 1);
pub const __AVR_LIBC_REVISION__ = @as(c_int, 0);
pub const _AVR_FUSE_H_ = @as(c_int, 1);
pub const _AVR_LOCK_H_ = @as(c_int, 1);
pub const LB_MODE_1 = @as(c_int, 0xFF);
pub const LB_MODE_2 = @as(c_int, 0xFE);
pub const LB_MODE_3 = @as(c_int, 0xFC);
pub const BLB0_MODE_1 = @as(c_int, 0xFF);
pub const BLB0_MODE_2 = @as(c_int, 0xFB);
pub const BLB0_MODE_3 = @as(c_int, 0xF3);
pub const BLB0_MODE_4 = @as(c_int, 0xF7);
pub const BLB1_MODE_1 = @as(c_int, 0xFF);
pub const BLB1_MODE_2 = @as(c_int, 0xEF);
pub const BLB1_MODE_3 = @as(c_int, 0xCF);
pub const BLB1_MODE_4 = @as(c_int, 0xDF);
pub const LOCKBITS_DEFAULT = @as(c_int, 0xFF);
